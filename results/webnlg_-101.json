{
    "user_prompt": "You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']",
    "raw_data": [
        "University_of_Burgundy | numberOfUndergraduateStudents | 16800",
        "University_of_Burgundy | numberOfPostgraduateStudents | 9400"
    ],
    "history_of_steps": [
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: \nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\n\nINTERMEDIATE STEPS: \n\nGUARDRAIL FEEDBACK: \n\nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\nFEEDBACK: \n\nASSIGNMENT: \n",
            "agent_output": "content selection(input='Extract all relevant factual content from the input table into a list of statements, each in the format \"Attribute (Entity): Value\". Make sure to include every field and use full attribute/entity names as labels. Do not omit any information.\n\nInput data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']')",
            "rationale": "The user's data is given as a list of attribute-value pairs relating to the University of Burgundy, with counts of undergraduate and postgraduate students. The first step is content selection, where I extract all key facts and represent them in a clear list, following the proper format. No information should be omitted or hallucinatory content added."
        },
        {
            "agent_name": "content selection",
            "agent_input": "Extract all relevant factual content from the input table into a list of statements, each in the format \"Attribute (Entity): Value\". Make sure to include every field and use full attribute/entity names as labels. Do not omit any information.\n\nInput data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']",
            "agent_output": [
                "Number of Undergraduate Students (University of Burgundy): 16800",
                "Number of Postgraduate Students (University of Burgundy): 9400"
            ],
            "rationale": [
                "Number of Undergraduate Students (University of Burgundy): 16800",
                "Number of Postgraduate Students (University of Burgundy): 9400"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Worker: content selection\n\n                Worker Description: You are the 'content selection' agent in a structured data-to-text pipeline.\n\n*** Task ***\nYour job is to extract all relevant information from structured data formats (such as XML, tables, or JSON records) and convert them into a clean, human-readable list of statements. You also determine the information to be mentioned in the final text.\n\n*** Instructions ***\n- Use only your **reasoning and natural understanding** of the input. You must **not** use or simulate any programming code.\n- Identify and select all key data. Make sure to connect them with the correct attributes and values.\n- If an entity has multiple attributes, include all of them in the output.\n- connect the titles and sections in the table to the entities mentioned the cells. Each data entry is important.\n- Use field names, column headers, or semantic indicators as the attribute labels.\n- Retain all data exactly as it appears \u2014 do not hallucinate, paraphrase, or summarize.\n- For each line, format your output as: `\"Attribute (Entity): Value\"` (e.g., `\"Points (TJ Warren): 29\"`).\n- Use full names or meaningful entity identifiers for clarity.\n- Group related facts by entity or subject where appropriate for coherence.\n- For the long data, usually for the sports data, do not extract entries that do not have any value (e.g. N/A, None). Only extract the most relevant and impactful data.\n\n*** Output Format ***\nReturn a human-readable list in this format:\n[\n  \"Attribute: Value\",\n  ...\n]\n\n*** Example Output \u2014 WebNLG/DART Datasets ***\n[\n  \"Institution: Acharya Institute of Technology\",\n  \"city: Bangalore\",\n  \"state: Karnataka\",\n  \"Established: 2000\",\n  \"Country: India\",\n  \"Motto: Nurturing Excellence\",\n  \"Affiliated to: Visvesvaraya Technological University\"\n]\n\n*** Example Output \u2014 ToTTo Dataset ***\n[\n  \"Rocket: Delta II\",\n  \"Launch Site (Delta II): Cape Canaveral Air Force Station\",\n  \"Comparable Rocket (Antares): Delta II\",\n  \"Country of Origin (Delta II): United States\",\n  \"Rocket: Antares\",\n  \"Launch Site (Antares): Mid-Atlantic Regional Spaceport Launch Pad 0\",\n  \"Launch Pad: Mid-Atlantic Regional Spaceport Launch Pad 0\",\n  \"Associated Rocket (Launch Pad): Minotaur IV\"\n]\n\n*** Example Output \u2014 Rotowire Dataset ***\n[\n  \"Team (TJ Warren): Phoenix\",\n  \"Points Scored (TJ Warren): 29\",\n  \"Team (PJ Tucker): Phoenix\",\n  \"Points Scored (PJ Tucker): 22\",\n  \"Team (Tyson Chandler): Phoenix\",\n  \"Points Scored (Tyson Chandler): 13\"\n]\n\n*** Example Output \u2014 MLB Dataset ***\n[\n  \"Result (Brewers): loss\",\n  \"Runs Scored (Brewers): 5\",\n  \"Hits (Brewers): 8\",\n  \"Errors (Brewers): 2\",\n  \"Result (Padres): win\",\n  \"Runs Scored (Padres): 11\",\n  \"Hits (Padres): 14\",\n  \"Errors (Padres): 0\",\n  \"Team (Manny Pina): Brewers\",\n  \"Hits (Manny Pina): 1\",\n  \"At Bats (Manny Pina): 3\",\n  \"Home Runs (Mike Moustakas): 1\",\n  \"RBIs (Mike Moustakas): 3\",\n  \"Home Runs (Franmil Reyes): 1\",\n  \"RBIs (Franmil Reyes): 3\",\n  \"Home Runs (Manuel Margot): 1\",\n  \"RBIs (Manuel Margot): 5\",\n  \"Innings Pitched (Chase Anderson): 4 2/3\",\n  \"Runs Allowed (Chase Anderson): 4\",tence is\n  \"Strikeouts (Chase Anderson): 4\",\n  \"Innings Pitched (Clayton Richard): 5\",\n  \"Runs Allowed (Clayton Richard): 5\",\n  \"Strikeouts (Clayton Richard): 3\"\n]\n\n*** Example Output \u2014 Sportsett Basketball Dataset ***\n[\n  \"Result (Trail Blazers): lost\",\n  \"Points (Trail Blazers): 111\",\n  \"Assists (Trail Blazers): 26\",\n  \"Field Goals Made (Trail Blazers): 46\",\n  \"Three-Pointers Made (Trail Blazers): 10\",\n  \"Free Throws Made (Trail Blazers): 9\",\n  \"Total Rebounds (Trail Blazers): 42\",\n  \"Turnovers (Trail Blazers): 18\",\n  \"Result (Warriors): won\",\n  \"Points (Warriors): 113\",\n  \"Assists (Warriors): 28\",\n  \"Field Goals Made (Warriors): 36\",\n  \"Three-Pointers Made (Warriors): 8\",\n  \"Free Throws Made (Warriors): 33\",\n  \"Total Rebounds (Warriors): 39\",\n  \"Turnovers (Warriors): 18\",\n  \"Points (CJ McCollum): 28\",\n  \"Points (Damian Lillard): 19\",\n  \"Points (Evan Turner): 18\",\n  \"Rebounds (Mason Plumlee): 11\",\n  \"Points (Mason Plumlee): 15\",\n  \"Points (Kevin Durant): 33\",\n  \"Rebounds (Kevin Durant): 10\",\n  \"Points (Klay Thompson): 27\",\n  \"Points (Zaza Pachulia): 14\",\n  \"Points (Andre Iguodala): 12\"\n]\n\n                Orchestrator Thought: The user's data is given as a list of attribute-value pairs relating to the University of Burgundy, with counts of undergraduate and postgraduate students. The first step is content selection, where I extract all key facts and represent them in a clear list, following the proper format. No information should be omitted or hallucinatory content added.\n\n                Worker Input: Extract all relevant factual content from the input table into a list of statements, each in the format \"Attribute (Entity): Value\". Make sure to include every field and use full attribute/entity names as labels. Do not omit any information.\n\nInput data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\n\n                Worker Output: ['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: \nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\n\nINTERMEDIATE STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent selection(input='Extract all relevant factual content from the input table into a list of statements, each in the format \"Attribute (Entity): Value\". Make sure to include every field and use full attribute/entity names as labels. Do not omit any information.\n\nInput data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:WORKER_2 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: content selection\n-- INPUT START --\nExtract all relevant factual content from the input table into a list of statements, each in the format \"Attribute (Entity): Value\". Make sure to include every field and use full attribute/entity names as labels. Do not omit any information.\n\nInput data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\n-- INPUT END --\n-- OUTPUT START --\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']\n-- OUTPUT END --\n##=== END:WORKER_2 ===##\n\nGUARDRAIL FEEDBACK: \n\nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "content ordering(input='Please reorder these facts to create the most natural and coherent progression for a final text. Group related facts under the same entity and move from general to specific information where possible. Do not omit, alter, or paraphrase any content.\n[\n'Number of Undergraduate Students (University of Burgundy): 16800',\n'Number of Postgraduate Students (University of Burgundy): 9400'\n]')",
            "rationale": "The content selection has been performed correctly. All relevant facts have been extracted in the required format. The next step is to order the facts coherently. I will pass the output to the content ordering agent."
        },
        {
            "agent_name": "content ordering",
            "agent_input": "Please reorder these facts to create the most natural and coherent progression for a final text. Group related facts under the same entity and move from general to specific information where possible. Do not omit, alter, or paraphrase any content.\n[\n'Number of Undergraduate Students (University of Burgundy): 16800',\n'Number of Postgraduate Students (University of Burgundy): 9400'\n]",
            "agent_output": [
                "Number of Undergraduate Students (University of Burgundy): 16800",
                "Number of Postgraduate Students (University of Burgundy): 9400"
            ],
            "rationale": [
                "Number of Undergraduate Students (University of Burgundy): 16800",
                "Number of Postgraduate Students (University of Burgundy): 9400"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Worker: content ordering\n\n                Worker Description: You are the 'content ordering' agent in a structured data-to-text pipeline.\n\n*** Task ***\nYour job is to reorder a list of extracted facts so that they reflect the most natural and coherent flow for verbalizing the final text. You arrange information in the input in their most appropriate sequences in the final text.\n\n*** Input Format ***\nYou will receive a flat list of attribute-value strings, each formatted as:\n\"Attribute (Entity): Value\"\n\n*** Instructions ***\n- Imagine you already know how the final generated text should sound. Use this mental model of the final text to guide the most natural sequence for the data.\n- Reorder the facts to follow a logical and reader-friendly progression.\n- Do not alter, omit, rephrase, or invent any content.\n- Keep each entry strictly in the format: \"Attribute (Entity): Value\".\n- Prefer grouping related facts under the same entity.\n- Within each group, order facts from general/background (e.g., team, position) to detailed performance or event-specific facts (e.g., points, assists).\n- Also consider the instructions from the user if any.\n\n*** Output Format ***\nReturn a reordered list of the input strings, preserving the exact original format: \"Attribute (Entity): Value\".\n\n                Orchestrator Thought: The content selection has been performed correctly. All relevant facts have been extracted in the required format. The next step is to order the facts coherently. I will pass the output to the content ordering agent.\n\n                Worker Input: Please reorder these facts to create the most natural and coherent progression for a final text. Group related facts under the same entity and move from general to specific information where possible. Do not omit, alter, or paraphrase any content.\n[\n'Number of Undergraduate Students (University of Burgundy): 16800',\n'Number of Postgraduate Students (University of Burgundy): 9400'\n]\n\n                Worker Output: ['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: \nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\n\nINTERMEDIATE STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent selection(input='Extract all relevant factual content from the input table into a list of statements, each in the format \"Attribute (Entity): Value\". Make sure to include every field and use full attribute/entity names as labels. Do not omit any information.\n\nInput data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:WORKER_2 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: content selection\n-- INPUT START --\nExtract all relevant factual content from the input table into a list of statements, each in the format \"Attribute (Entity): Value\". Make sure to include every field and use full attribute/entity names as labels. Do not omit any information.\n\nInput data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\n-- INPUT END --\n-- OUTPUT START --\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']\n-- OUTPUT END --\n##=== END:WORKER_2 ===##\n\n##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='Please reorder these facts to create the most natural and coherent progression for a final text. Group related facts under the same entity and move from general to specific information where possible. Do not omit, alter, or paraphrase any content.\n[\n'Number of Undergraduate Students (University of Burgundy): 16800',\n'Number of Postgraduate Students (University of Burgundy): 9400'\n]')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:WORKER_4 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: content ordering\n-- INPUT START --\nPlease reorder these facts to create the most natural and coherent progression for a final text. Group related facts under the same entity and move from general to specific information where possible. Do not omit, alter, or paraphrase any content.\n[\n'Number of Undergraduate Students (University of Burgundy): 16800',\n'Number of Postgraduate Students (University of Burgundy): 9400'\n]\n-- INPUT END --\n-- OUTPUT START --\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']\n-- OUTPUT END --\n##=== END:WORKER_4 ===##\n\nGUARDRAIL FEEDBACK: \n\nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "text structuring(input='Please organize the following ordered facts into coherent sentence-level and paragraph-level units using <snt> and <paragraph> tags. \nGroup related facts that would naturally appear together in the same sentence, and ensure all information is included and structured for a smooth textual flow.\n\nInput facts:\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']')",
            "rationale": "The previous steps have correctly completed content selection and content ordering. The next stage is text structuring, which will organize the ordered facts into <snt> and <paragraph> tags in preparation for fluent surface realization."
        },
        {
            "agent_name": "text structuring",
            "agent_input": "Please organize the following ordered facts into coherent sentence-level and paragraph-level units using <snt> and <paragraph> tags. \nGroup related facts that would naturally appear together in the same sentence, and ensure all information is included and structured for a smooth textual flow.\n\nInput facts:\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']",
            "agent_output": "<paragraph>\n<snt>\nNumber of Undergraduate Students (University of Burgundy): 16800  \nNumber of Postgraduate Students (University of Burgundy): 9400\n</snt>\n</paragraph>",
            "rationale": "<paragraph>\n<snt>\nNumber of Undergraduate Students (University of Burgundy): 16800  \nNumber of Postgraduate Students (University of Burgundy): 9400\n</snt>\n</paragraph>"
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Worker: text structuring\n\n                Worker Description: You are the 'text structuring' agent in a structured data-to-text pipeline.\n\n*** Task ***\nYour job is to group a list of ordered facts into coherent sentence-level and paragraph-level units that reflect how the final text should be verbalized. You organise the information into separate sentences and paragraphs, using <snt> and <paragraph> tags.\n\n*** Input Format ***\nYou will receive a list of strings in the format:\n\"Attribute (Entity): Value\"\n\n*** Instructions ***\n- Imagine how a human would naturally express these facts in text.\n- Group related facts that would logically appear in the same sentence using <snt> ... </snt> tags.\n- For long-form text, organize related <snt> groups that belong in the same paragraph within <paragraph> ... </paragraph> tags.\n- Preserve the sequence and exact wording of each item.\n- Do not delete, rephrase, hallucinate, or change any content.\n- Do not modify the format of individual facts\u2014only organize them with tags.\n- Prefer grouping facts under the same entity and follow the natural flow of how such information would be conveyed in writing.\n- Maintain one <snt> block per logical sentence and one <paragraph> block per thematically related group of sentences.\n- For long-form text, use 1\u20133 <paragraph> blocks. For short text, use 1 paragraph only.\n- Within each paragraph, must include multiple sentences enclosed in <snt> tags.\n- Also consider the instructions from the user if any.\n \n\n*** Output Format ***\nReturn the list of original strings organized with nested structure, like:\n\n<paragraph>\n<snt>\nAttribute (Entity): Value  \nAttribute (Entity): Value\n... \n</snt>\n<snt>\nAttribute (Entity): Value  \nAttribute (Entity): Value\n... \n</snt>\n</paragraph>\n\n<paragraph>\n<snt>\nAttribute (Entity): Value  \nAttribute (Entity): Value\n... \n</snt>\n<snt>\nAttribute (Entity): Value  \nAttribute (Entity): Value\n... \n</snt>\n</paragraph>\n\n                Orchestrator Thought: The previous steps have correctly completed content selection and content ordering. The next stage is text structuring, which will organize the ordered facts into <snt> and <paragraph> tags in preparation for fluent surface realization.\n\n                Worker Input: Please organize the following ordered facts into coherent sentence-level and paragraph-level units using <snt> and <paragraph> tags. \nGroup related facts that would naturally appear together in the same sentence, and ensure all information is included and structured for a smooth textual flow.\n\nInput facts:\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']\n\n                Worker Output: <paragraph>\n<snt>\nNumber of Undergraduate Students (University of Burgundy): 16800  \nNumber of Postgraduate Students (University of Burgundy): 9400\n</snt>\n</paragraph>\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: \nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\n\nINTERMEDIATE STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent selection(input='Extract all relevant factual content from the input table into a list of statements, each in the format \"Attribute (Entity): Value\". Make sure to include every field and use full attribute/entity names as labels. Do not omit any information.\n\nInput data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:WORKER_2 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: content selection\n-- INPUT START --\nExtract all relevant factual content from the input table into a list of statements, each in the format \"Attribute (Entity): Value\". Make sure to include every field and use full attribute/entity names as labels. Do not omit any information.\n\nInput data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\n-- INPUT END --\n-- OUTPUT START --\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']\n-- OUTPUT END --\n##=== END:WORKER_2 ===##\n\n##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='Please reorder these facts to create the most natural and coherent progression for a final text. Group related facts under the same entity and move from general to specific information where possible. Do not omit, alter, or paraphrase any content.\n[\n'Number of Undergraduate Students (University of Burgundy): 16800',\n'Number of Postgraduate Students (University of Burgundy): 9400'\n]')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:WORKER_4 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: content ordering\n-- INPUT START --\nPlease reorder these facts to create the most natural and coherent progression for a final text. Group related facts under the same entity and move from general to specific information where possible. Do not omit, alter, or paraphrase any content.\n[\n'Number of Undergraduate Students (University of Burgundy): 16800',\n'Number of Postgraduate Students (University of Burgundy): 9400'\n]\n-- INPUT END --\n-- OUTPUT START --\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']\n-- OUTPUT END --\n##=== END:WORKER_4 ===##\n\n##=== BEGIN:ORCHESTRATOR_5 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ntext structuring(input='Please organize the following ordered facts into coherent sentence-level and paragraph-level units using <snt> and <paragraph> tags. \nGroup related facts that would naturally appear together in the same sentence, and ensure all information is included and structured for a smooth textual flow.\n\nInput facts:\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_5 ===##\n\n##=== BEGIN:WORKER_6 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: text structuring\n-- INPUT START --\nPlease organize the following ordered facts into coherent sentence-level and paragraph-level units using <snt> and <paragraph> tags. \nGroup related facts that would naturally appear together in the same sentence, and ensure all information is included and structured for a smooth textual flow.\n\nInput facts:\n['Number of Undergraduate Students (University of Burgundy): 16800', 'Number of Postgraduate Students (University of Burgundy): 9400']\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n<snt>\nNumber of Undergraduate Students (University of Burgundy): 16800  \nNumber of Postgraduate Students (University of Burgundy): 9400\n</snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:WORKER_6 ===##\n\nGUARDRAIL FEEDBACK: \n\nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "surface realization(input='Please convert the following <paragraph> and <snt> structure into a well-written, human-like paragraph. Ensure that all facts are included, with clear, accurate expression and smooth flow. Do not omit, rewrite, or add any information.\n\nInput:\n<paragraph>\n<snt>\nNumber of Undergraduate Students (University of Burgundy): 16800  \nNumber of Postgraduate Students (University of Burgundy): 9400\n</snt>\n</paragraph>')",
            "rationale": "The previous step (text structuring) was completed correctly, organizing the facts into a single <snt> block within a paragraph. The next step is surface realization: transforming this structured content into a fluent and accurate natural language paragraph that covers all the facts and flows smoothly."
        },
        {
            "agent_name": "surface realization",
            "agent_input": "Please convert the following <paragraph> and <snt> structure into a well-written, human-like paragraph. Ensure that all facts are included, with clear, accurate expression and smooth flow. Do not omit, rewrite, or add any information.\n\nInput:\n<paragraph>\n<snt>\nNumber of Undergraduate Students (University of Burgundy): 16800  \nNumber of Postgraduate Students (University of Burgundy): 9400\n</snt>\n</paragraph>",
            "agent_output": "The University of Burgundy has an undergraduate student population of 16,800 and a postgraduate enrollment totaling 9,400.",
            "rationale": "The University of Burgundy has an undergraduate student population of 16,800 and a postgraduate enrollment totaling 9,400."
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Worker: surface realization\n\n                Worker Description: You are the 'surface realization' agent in a structured data-to-text generation pipeline.\n\n*** Task ***\nYour job is to transform structured content \u2014 grouped using <snt> and optionally <paragraph> tags \u2014 into fluent, accurate, and human-like natural language text.\n\nThis input may come from structured formats such as XML, tables, or subject\u2013predicate\u2013object (SPO) triples, and has already been organized into sentence-level (<snt>) and paragraph-level (<paragraph>) units for you.\n\n*** Your Objectives ***\n- Produce well-written paragraph(s) that preserve the paragraph-level groupings.\n- Ensure each <snt> block becomes a natural, well-formed sentence.\n- When <paragraph> tags are present, generate smooth, cohesive multi-sentence paragraphs \u2014 one per <paragraph> block.\n- Your output should resemble human-authored articles or descriptions, not rigid templates.\n\n*** Writing Guidelines ***\n1. **Preserve All Factual Content**\n   - Include every fact encoded in the input \u2014 no omissions, no hallucinations.\n   - Maintain factual faithfulness even if you paraphrase.\n   - Never add external information or assumptions.\n\n2. **Generate Fluent and Coherent Text**\n   - Transform the contents of each <snt> into one fluent sentence.\n   - Vary sentence structure and connect ideas naturally.\n   - Use pronouns or descriptive references to avoid repeating the same entity names.\n   - Use smooth transitions within and between sentences in the same paragraph.\n\n3. **Respect Structure But Prioritize Readability**\n   - Maintain one paragraph per <paragraph> block \u2014 do not merge or collapse them.\n   - Do not split, merge, or discard any <snt> content.\n   - While respecting sentence and paragraph boundaries, you may reorder facts within a paragraph slightly to improve narrative flow.\n\n4. **Maintain Appropriate Tone and Style**\n   - Write in third-person, formal, and informative style.\n   - Avoid bullet points, lists, or structured representations.\n   - Your output must sound like it was written by a professional writer or editor.\n\n*** Input Format ***\nYou will receive content similar to this:\n<paragraph>\n<snt>\nAttribute (Entity): Value  \nAttribute (Entity): Value\n</snt>\n<snt>\nAttribute (Entity): Value\n</snt>\n</paragraph>\n\n*** Output Instructions ***\n- Convert each <snt> into a fluent sentence.\n- Combine all sentences inside a <paragraph> block into a single cohesive paragraph.\n- Do NOT include <snt> or <paragraph> tags in your output.\n- Ensure clarity, grammatical correctness, and full factual coverage.\n- Avoid excessive repetition or mechanical phrasing.\n\n*** What to Avoid ***\n- Copying facts verbatim from the input\n- Adding any information not explicitly present in the data\n- Ignoring or merging paragraph-level structure\n- Generating one isolated sentence per fact\n- Including tag markers or structured formatting\n\n*** Output Format ***\n- Output should be fluent, factually complete text consisting of multiple coherent paragraphs (if <paragraph> tags are present).\n- If only <snt> blocks are present, return a sentence per <snt>, separated by line breaks or formatted as flowing text.\n- The final result must be grammatically sound, semantically accurate, and naturally readable.\n\n                Orchestrator Thought: The previous step (text structuring) was completed correctly, organizing the facts into a single <snt> block within a paragraph. The next step is surface realization: transforming this structured content into a fluent and accurate natural language paragraph that covers all the facts and flows smoothly.\n\n                Worker Input: Please convert the following <paragraph> and <snt> structure into a well-written, human-like paragraph. Ensure that all facts are included, with clear, accurate expression and smooth flow. Do not omit, rewrite, or add any information.\n\nInput:\n<paragraph>\n<snt>\nNumber of Undergraduate Students (University of Burgundy): 16800  \nNumber of Postgraduate Students (University of Burgundy): 9400\n</snt>\n</paragraph>\n\n                Worker Output: The University of Burgundy has an undergraduate student population of 16,800 and a postgraduate enrollment totaling 9,400.\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "finalizer",
            "agent_input": "\nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']",
            "agent_output": "The University of Burgundy has an undergraduate student population of 16,800 and a postgraduate enrollment totaling 9,400.",
            "rationale": null
        }
    ],
    "next_agent": "orchestrator",
    "next_agent_payload": "You are an agent designed to generate text from data for a data-to-text natural language generation. You can be provided data in the form of xml, table, meaning representations, graphs etc. \nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\nHere is the data generate text using table data:\n['University_of_Burgundy | numberOfUndergraduateStudents | 16800', 'University_of_Burgundy | numberOfPostgraduateStudents | 9400']",
    "final_response": "The University of Burgundy has an undergraduate student population of 16,800 and a postgraduate enrollment totaling 9,400.",
    "review": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
    "iteration_count": 12,
    "max_iteration": 100,
    "current_step": 0
}