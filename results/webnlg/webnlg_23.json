{
    "user_prompt": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: ",
    "final_response": "The song \"Mermaid\" by Train is featured on the album \"California 37\" and was produced by the production team Espionage. It is followed by the song \"Imagine\" by John Lennon.",
    "next_agent": "orchestrator",
    "next_agent_payload": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: ",
    "review": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
    "iteration_count": 9,
    "max_iteration": 60,
    "history_of_steps": [
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: \n\nASSIGNMENT: \n",
            "agent_output": "content ordering(input='- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence that would support a coherent and natural narrative in the final text. Ensure that all information is included and that the order supports clarity and readability.', instruction='- Review the three RDF triples and determine the most logical order for presenting this information in a short, coherent text.\n- Consider starting with the basic identity of the song (e.g., its album), then its production, and finally its relation to other songs (e.g., what song follows it).\n- Do not omit any data or add any information not present in the input.\n- Output the ordered list of content points, ready for the next stage (Text Structuring).')",
            "rationale": "The user has provided a set of RDF triples from the WebNLG dataset, each describing a relationship involving the song \"Mermaid\" by Train. The task is to generate a coherent, fluent text that accurately conveys all the information in the data, without omitting any field or introducing hallucinations. According to the workflow policy, the first step is Content Ordering, where the information should be logically sequenced to form a coherent narrative. No prior pipeline results or guardrail feedback exist yet, so I will proceed to assign the 'content ordering' worker."
        },
        {
            "agent_name": "content ordering",
            "agent_input": "- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence that would support a coherent and natural narrative in the final text. Ensure that all information is included and that the order supports clarity and readability. \nAdditional Instruction: - Review the three RDF triples and determine the most logical order for presenting this information in a short, coherent text.\n- Consider starting with the basic identity of the song (e.g., its album), then its production, and finally its relation to other songs (e.g., what song follows it).\n- Do not omit any data or add any information not present in the input.\n- Output the ordered list of content points, ready for the next stage (Text Structuring).",
            "agent_output": [
                "Mermaid_(Train_song) | album | California_37_(Train_album)",
                "Mermaid_(Train_song) | producer | Espionage_(production_team)",
                "Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)"
            ],
            "rationale": [
                "Mermaid_(Train_song) | album | California_37_(Train_album)",
                "Mermaid_(Train_song) | producer | Espionage_(production_team)",
                "Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The user has provided a set of RDF triples from the WebNLG dataset, each describing a relationship involving the song \"Mermaid\" by Train. The task is to generate a coherent, fluent text that accurately conveys all the information in the data, without omitting any field or introducing hallucinations. According to the workflow policy, the first step is Content Ordering, where the information should be logically sequenced to form a coherent narrative. No prior pipeline results or guardrail feedback exist yet, so I will proceed to assign the 'content ordering' worker. \n\nWorker Input: - Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence that would support a coherent and natural narrative in the final text. Ensure that all information is included and that the order supports clarity and readability.', instruction='- Review the three RDF triples and determine the most logical order for presenting this information in a short, coherent text.\n- Consider starting with the basic identity of the song (e.g., its album), then its production, and finally its relation to other songs (e.g., what song follows it).\n- Do not omit any data or add any information not present in the input.\n- Output the ordered list of content points, ready for the next stage (Text Structuring). \n\nWorker Output: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence that would support a coherent and natural narrative in the final text. Ensure that all information is included and that the order supports clarity and readability.', instruction='- Review the three RDF triples and determine the most logical order for presenting this information in a short, coherent text.\n- Consider starting with the basic identity of the song (e.g., its album), then its production, and finally its relation to other songs (e.g., what song follows it).\n- Do not omit any data or add any information not present in the input.\n- Output the ordered list of content points, ready for the next stage (Text Structuring).')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:WORKER_2 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: content ordering\n-- INPUT START --\n- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence that would support a coherent and natural narrative in the final text. Ensure that all information is included and that the order supports clarity and readability. \nAdditional Instruction: - Review the three RDF triples and determine the most logical order for presenting this information in a short, coherent text.\n- Consider starting with the basic identity of the song (e.g., its album), then its production, and finally its relation to other songs (e.g., what song follows it).\n- Do not omit any data or add any information not present in the input.\n- Output the ordered list of content points, ready for the next stage (Text Structuring).\n-- INPUT END --\n-- OUTPUT START --\n['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n-- OUTPUT END --\n##=== END:WORKER_2 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "text structuring(input='- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- Ordered Content: \n  1. Mermaid_(Train_song) | album | California_37_(Train_album)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a coherent textual structure (e.g., a paragraph or list) that clearly presents all the information, ready for surface realization.', instruction='- Use the ordered content to create a structured text outline or paragraph that logically connects all the facts.\n- Ensure that each piece of information is clearly presented and that the structure supports easy conversion to fluent natural language in the next stage.\n- Do not omit any data or add any information not present in the input.\n- Output the structured text, ready for surface realization.')",
            "rationale": "The content ordering stage has been completed correctly, as confirmed by the guardrail feedback (\"CORRECT\"). The next step in the pipeline is Text Structuring. The 'text structuring' worker should now take the ordered content and organize it into a clear textual structure, such as a paragraph, ensuring all information is included and logically connected. There is no need to revisit the previous stage, and no errors or omissions have been identified."
        },
        {
            "agent_name": "text structuring",
            "agent_input": "- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- Ordered Content: \n  1. Mermaid_(Train_song) | album | California_37_(Train_album)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a coherent textual structure (e.g., a paragraph or list) that clearly presents all the information, ready for surface realization. \nAdditional Instruction: - Use the ordered content to create a structured text outline or paragraph that logically connects all the facts.\n- Ensure that each piece of information is clearly presented and that the structure supports easy conversion to fluent natural language in the next stage.\n- Do not omit any data or add any information not present in the input.\n- Output the structured text, ready for surface realization.",
            "agent_output": "<paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>",
            "rationale": "<paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>"
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The content ordering stage has been completed correctly, as confirmed by the guardrail feedback (\"CORRECT\"). The next step in the pipeline is Text Structuring. The 'text structuring' worker should now take the ordered content and organize it into a clear textual structure, such as a paragraph, ensuring all information is included and logically connected. There is no need to revisit the previous stage, and no errors or omissions have been identified. \n\nWorker Input: - Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- Ordered Content: \n  1. Mermaid_(Train_song) | album | California_37_(Train_album)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a coherent textual structure (e.g., a paragraph or list) that clearly presents all the information, ready for surface realization.', instruction='- Use the ordered content to create a structured text outline or paragraph that logically connects all the facts.\n- Ensure that each piece of information is clearly presented and that the structure supports easy conversion to fluent natural language in the next stage.\n- Do not omit any data or add any information not present in the input.\n- Output the structured text, ready for surface realization. \n\nWorker Output: <paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ntext structuring(input='- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- Ordered Content: \n  1. Mermaid_(Train_song) | album | California_37_(Train_album)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a coherent textual structure (e.g., a paragraph or list) that clearly presents all the information, ready for surface realization.', instruction='- Use the ordered content to create a structured text outline or paragraph that logically connects all the facts.\n- Ensure that each piece of information is clearly presented and that the structure supports easy conversion to fluent natural language in the next stage.\n- Do not omit any data or add any information not present in the input.\n- Output the structured text, ready for surface realization.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:WORKER_4 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- Ordered Content: \n  1. Mermaid_(Train_song) | album | California_37_(Train_album)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a coherent textual structure (e.g., a paragraph or list) that clearly presents all the information, ready for surface realization. \nAdditional Instruction: - Use the ordered content to create a structured text outline or paragraph that logically connects all the facts.\n- Ensure that each piece of information is clearly presented and that the structure supports easy conversion to fluent natural language in the next stage.\n- Do not omit any data or add any information not present in the input.\n- Output the structured text, ready for surface realization.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:WORKER_4 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "surface realization(input='- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- Ordered Content: \n  1. Mermaid_(Train_song) | album | California_37_(Train_album)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n- Structured Text:\n<paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>\n- No prior guardrail feedback for this stage.', instruction='- Convert the structured text into a fluent, natural, and grammatically correct paragraph.\n- Ensure all facts are included: \"Mermaid\" (the Train song) is from the album \"California 37,\" was produced by Espionage (production team), and is followed by \"Imagine\" (John Lennon song).\n- Do not omit any information or add any details not present in the data.\n- The final text should be clear, readable, and suitable for a general audience.')",
            "rationale": "The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all information is present, well-organized, and ready for surface realization. According to the workflow policy, I must now proceed to the surface realization stage. I will provide the original data, the ordered content, the structured text, and clear instructions to ensure the final output is fluent, coherent, and does not omit or hallucinate any information."
        },
        {
            "agent_name": "surface realization",
            "agent_input": "- Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- Ordered Content: \n  1. Mermaid_(Train_song) | album | California_37_(Train_album)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n- Structured Text:\n<paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>\n- No prior guardrail feedback for this stage. \nAdditional Instruction: - Convert the structured text into a fluent, natural, and grammatically correct paragraph.\n- Ensure all facts are included: \"Mermaid\" (the Train song) is from the album \"California 37,\" was produced by Espionage (production team), and is followed by \"Imagine\" (John Lennon song).\n- Do not omit any information or add any details not present in the data.\n- The final text should be clear, readable, and suitable for a general audience.",
            "agent_output": "The song \"Mermaid\" by Train is featured on the album \"California 37\" and was produced by the production team Espionage. It is followed by the song \"Imagine\" by John Lennon.",
            "rationale": "The song \"Mermaid\" by Train is featured on the album \"California 37\" and was produced by the production team Espionage. It is followed by the song \"Imagine\" by John Lennon."
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all information is present, well-organized, and ready for surface realization. According to the workflow policy, I must now proceed to the surface realization stage. I will provide the original data, the ordered content, the structured text, and clear instructions to ensure the final output is fluent, coherent, and does not omit or hallucinate any information. \n\nWorker Input: - Original Data: \n  1. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | album | California_37_(Train_album)\n- Ordered Content: \n  1. Mermaid_(Train_song) | album | California_37_(Train_album)\n  2. Mermaid_(Train_song) | producer | Espionage_(production_team)\n  3. Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n- Structured Text:\n<paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>\n- No prior guardrail feedback for this stage.', instruction='- Convert the structured text into a fluent, natural, and grammatically correct paragraph.\n- Ensure all facts are included: \"Mermaid\" (the Train song) is from the album \"California 37,\" was produced by Espionage (production team), and is followed by \"Imagine\" (John Lennon song).\n- Do not omit any information or add any details not present in the data.\n- The final text should be clear, readable, and suitable for a general audience. \n\nWorker Output: The song \"Mermaid\" by Train is featured on the album \"California 37\" and was produced by the production team Espionage. It is followed by the song \"Imagine\" by John Lennon.\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "finalizer",
            "agent_input": "\nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: ",
            "agent_output": "The song \"Mermaid\" by Train is featured on the album \"California 37\" and was produced by the production team Espionage. It is followed by the song \"Imagine\" by John Lennon.",
            "rationale": null
        }
    ]
}