{
    "user_prompt": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\nOutput: ",
    "final_response": "Bananaman was created by Steve Bright and starred Bill Oddie. The show last aired on April 15, 1986, and was broadcast by the BBC, which is based at Broadcasting House.",
    "next_agent": "orchestrator",
    "next_agent_payload": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\nOutput: ",
    "review": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
    "iteration_count": 9,
    "max_iteration": 60,
    "history_of_steps": [
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\nOutput: \n\nASSIGNMENT: \n",
            "agent_output": "content ordering(input='- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that will support a coherent and natural narrative in the final text. Ensure that all facts are included and that related information is grouped together for clarity.', instruction='- Review all data fields and determine a logical sequence for presenting the information.\n- Group related facts (e.g., all about Bananaman together, and facts about BBC together).\n- Sequence the facts so that the resulting text will be coherent and easy to follow.\n- Do not omit any data or introduce new information.\n- Output the ordered list of facts, ready for the next stage (Text Structuring).')",
            "rationale": "The user has provided a set of RDF-style triples from the WebNLG dataset, which need to be converted into a coherent, fluent text without omitting any information or introducing hallucinations. According to the pipeline, the first step is Content Ordering, where the data is organized into a logical sequence to facilitate a coherent narrative. No prior pipeline stages or guardrail feedback exist yet, so the next step is to assign the 'content ordering' worker. The worker should focus on grouping related facts (e.g., all about Bananaman, then about BBC) and determining a logical order for presenting them."
        },
        {
            "agent_name": "content ordering",
            "agent_input": "- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that will support a coherent and natural narrative in the final text. Ensure that all facts are included and that related information is grouped together for clarity. \nAdditional Instruction: - Review all data fields and determine a logical sequence for presenting the information.\n- Group related facts (e.g., all about Bananaman together, and facts about BBC together).\n- Sequence the facts so that the resulting text will be coherent and easy to follow.\n- Do not omit any data or introduce new information.\n- Output the ordered list of facts, ready for the next stage (Text Structuring).",
            "agent_output": [
                "Bananaman | creator | Steve_Bright",
                "Bananaman | starring | Bill_Oddie",
                "Bananaman | lastAired | \"1986-04-15\"",
                "Bananaman | broadcastedBy | BBC",
                "BBC | city | Broadcasting_House"
            ],
            "rationale": [
                "Bananaman | creator | Steve_Bright",
                "Bananaman | starring | Bill_Oddie",
                "Bananaman | lastAired | \"1986-04-15\"",
                "Bananaman | broadcastedBy | BBC",
                "BBC | city | Broadcasting_House"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The user has provided a set of RDF-style triples from the WebNLG dataset, which need to be converted into a coherent, fluent text without omitting any information or introducing hallucinations. According to the pipeline, the first step is Content Ordering, where the data is organized into a logical sequence to facilitate a coherent narrative. No prior pipeline stages or guardrail feedback exist yet, so the next step is to assign the 'content ordering' worker. The worker should focus on grouping related facts (e.g., all about Bananaman, then about BBC) and determining a logical order for presenting them. \n\nWorker Input: - Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that will support a coherent and natural narrative in the final text. Ensure that all facts are included and that related information is grouped together for clarity.', instruction='- Review all data fields and determine a logical sequence for presenting the information.\n- Group related facts (e.g., all about Bananaman together, and facts about BBC together).\n- Sequence the facts so that the resulting text will be coherent and easy to follow.\n- Do not omit any data or introduce new information.\n- Output the ordered list of facts, ready for the next stage (Text Structuring). \n\nWorker Output: ['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that will support a coherent and natural narrative in the final text. Ensure that all facts are included and that related information is grouped together for clarity.', instruction='- Review all data fields and determine a logical sequence for presenting the information.\n- Group related facts (e.g., all about Bananaman together, and facts about BBC together).\n- Sequence the facts so that the resulting text will be coherent and easy to follow.\n- Do not omit any data or introduce new information.\n- Output the ordered list of facts, ready for the next stage (Text Structuring).')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:WORKER_2 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: content ordering\n-- INPUT START --\n- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that will support a coherent and natural narrative in the final text. Ensure that all facts are included and that related information is grouped together for clarity. \nAdditional Instruction: - Review all data fields and determine a logical sequence for presenting the information.\n- Group related facts (e.g., all about Bananaman together, and facts about BBC together).\n- Sequence the facts so that the resulting text will be coherent and easy to follow.\n- Do not omit any data or introduce new information.\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n-- INPUT END --\n-- OUTPUT START --\n['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n-- OUTPUT END --\n##=== END:WORKER_2 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "text structuring(input='- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- Ordered Facts: ['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n- No prior guardrail feedback for this stage.\n- Task: Organize the ordered facts into a clear and logical textual structure (such as a paragraph or list) that will support fluent and coherent surface realization. Ensure all facts are included, related information is grouped, and the structure is easy to follow.', instruction='- Use the ordered facts to create a structured text outline (e.g., a paragraph or bullet points).\n- Group related information together for clarity.\n- Ensure that all data fields are represented and no information is omitted or invented.\n- The output should be ready for the surface realization stage, supporting natural and coherent text generation.')",
            "rationale": "The content ordering stage has been completed correctly, as confirmed by the guardrail feedback labeled 'CORRECT'. The facts are logically grouped and sequenced, with all information included and no omissions or hallucinations. The next step in the pipeline is Text Structuring, where the ordered facts will be organized into a clear textual structure (such as paragraphs or lists) to support fluent surface realization. I will provide the text structuring worker with the original data, the ordered list of facts, and clear instructions to ensure all information is included and logically organized."
        },
        {
            "agent_name": "text structuring",
            "agent_input": "- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- Ordered Facts: ['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n- No prior guardrail feedback for this stage.\n- Task: Organize the ordered facts into a clear and logical textual structure (such as a paragraph or list) that will support fluent and coherent surface realization. Ensure all facts are included, related information is grouped, and the structure is easy to follow. \nAdditional Instruction: - Use the ordered facts to create a structured text outline (e.g., a paragraph or bullet points).\n- Group related information together for clarity.\n- Ensure that all data fields are represented and no information is omitted or invented.\n- The output should be ready for the surface realization stage, supporting natural and coherent text generation.",
            "agent_output": "<paragraph>\n  <snt>\n    Bananaman | creator | Steve_Bright\n    Bananaman | starring | Bill_Oddie\n  </snt>\n  <snt>\n    Bananaman | lastAired | \"1986-04-15\"\n    Bananaman | broadcastedBy | BBC\n  </snt>\n  <snt>\n    BBC | city | Broadcasting_House\n  </snt>\n</paragraph>",
            "rationale": "<paragraph>\n  <snt>\n    Bananaman | creator | Steve_Bright\n    Bananaman | starring | Bill_Oddie\n  </snt>\n  <snt>\n    Bananaman | lastAired | \"1986-04-15\"\n    Bananaman | broadcastedBy | BBC\n  </snt>\n  <snt>\n    BBC | city | Broadcasting_House\n  </snt>\n</paragraph>"
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The content ordering stage has been completed correctly, as confirmed by the guardrail feedback labeled 'CORRECT'. The facts are logically grouped and sequenced, with all information included and no omissions or hallucinations. The next step in the pipeline is Text Structuring, where the ordered facts will be organized into a clear textual structure (such as paragraphs or lists) to support fluent surface realization. I will provide the text structuring worker with the original data, the ordered list of facts, and clear instructions to ensure all information is included and logically organized. \n\nWorker Input: - Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- Ordered Facts: ['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n- No prior guardrail feedback for this stage.\n- Task: Organize the ordered facts into a clear and logical textual structure (such as a paragraph or list) that will support fluent and coherent surface realization. Ensure all facts are included, related information is grouped, and the structure is easy to follow.', instruction='- Use the ordered facts to create a structured text outline (e.g., a paragraph or bullet points).\n- Group related information together for clarity.\n- Ensure that all data fields are represented and no information is omitted or invented.\n- The output should be ready for the surface realization stage, supporting natural and coherent text generation. \n\nWorker Output: <paragraph>\n  <snt>\n    Bananaman | creator | Steve_Bright\n    Bananaman | starring | Bill_Oddie\n  </snt>\n  <snt>\n    Bananaman | lastAired | \"1986-04-15\"\n    Bananaman | broadcastedBy | BBC\n  </snt>\n  <snt>\n    BBC | city | Broadcasting_House\n  </snt>\n</paragraph>\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ntext structuring(input='- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- Ordered Facts: ['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n- No prior guardrail feedback for this stage.\n- Task: Organize the ordered facts into a clear and logical textual structure (such as a paragraph or list) that will support fluent and coherent surface realization. Ensure all facts are included, related information is grouped, and the structure is easy to follow.', instruction='- Use the ordered facts to create a structured text outline (e.g., a paragraph or bullet points).\n- Group related information together for clarity.\n- Ensure that all data fields are represented and no information is omitted or invented.\n- The output should be ready for the surface realization stage, supporting natural and coherent text generation.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:WORKER_4 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- Ordered Facts: ['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n- No prior guardrail feedback for this stage.\n- Task: Organize the ordered facts into a clear and logical textual structure (such as a paragraph or list) that will support fluent and coherent surface realization. Ensure all facts are included, related information is grouped, and the structure is easy to follow. \nAdditional Instruction: - Use the ordered facts to create a structured text outline (e.g., a paragraph or bullet points).\n- Group related information together for clarity.\n- Ensure that all data fields are represented and no information is omitted or invented.\n- The output should be ready for the surface realization stage, supporting natural and coherent text generation.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Bananaman | creator | Steve_Bright\n    Bananaman | starring | Bill_Oddie\n  </snt>\n  <snt>\n    Bananaman | lastAired | \"1986-04-15\"\n    Bananaman | broadcastedBy | BBC\n  </snt>\n  <snt>\n    BBC | city | Broadcasting_House\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:WORKER_4 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "surface realization(input='- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- Ordered Facts: ['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n- Structured Text:\n<paragraph>\n  <snt>\n    Bananaman | creator | Steve_Bright\n    Bananaman | starring | Bill_Oddie\n  </snt>\n  <snt>\n    Bananaman | lastAired | \"1986-04-15\"\n    Bananaman | broadcastedBy | BBC\n  </snt>\n  <snt>\n    BBC | city | Broadcasting_House\n  </snt>\n</paragraph>\n- No prior guardrail feedback for this stage.', instruction='- Using the structured text and all provided data, generate a fluent, coherent, and natural paragraph that includes all facts without omission or hallucination.\n- Ensure the text is grammatically correct, easy to read, and clearly presents the relationships between entities.\n- Do not add any information not present in the data.\n- The final output should be a single, well-formed paragraph suitable for end-user consumption.')",
            "rationale": "The text structuring output has been validated as CORRECT by the guardrail feedback, confirming that all facts are included, logically grouped, and ready for fluent text generation. According to the workflow policy, I must now proceed to the next stage: surface realization. I will provide the surface realization worker with the original data, the ordered facts, the structured text, and clear instructions to generate a fluent, coherent, and natural paragraph that covers all the information without omission or hallucination."
        },
        {
            "agent_name": "surface realization",
            "agent_input": "- Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- Ordered Facts: ['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n- Structured Text:\n<paragraph>\n  <snt>\n    Bananaman | creator | Steve_Bright\n    Bananaman | starring | Bill_Oddie\n  </snt>\n  <snt>\n    Bananaman | lastAired | \"1986-04-15\"\n    Bananaman | broadcastedBy | BBC\n  </snt>\n  <snt>\n    BBC | city | Broadcasting_House\n  </snt>\n</paragraph>\n- No prior guardrail feedback for this stage. \nAdditional Instruction: - Using the structured text and all provided data, generate a fluent, coherent, and natural paragraph that includes all facts without omission or hallucination.\n- Ensure the text is grammatically correct, easy to read, and clearly presents the relationships between entities.\n- Do not add any information not present in the data.\n- The final output should be a single, well-formed paragraph suitable for end-user consumption.",
            "agent_output": "Bananaman was created by Steve Bright and starred Bill Oddie. The show last aired on April 15, 1986, and was broadcast by the BBC, which is based at Broadcasting House.",
            "rationale": "Bananaman was created by Steve Bright and starred Bill Oddie. The show last aired on April 15, 1986, and was broadcast by the BBC, which is based at Broadcasting House."
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The text structuring output has been validated as CORRECT by the guardrail feedback, confirming that all facts are included, logically grouped, and ready for fluent text generation. According to the workflow policy, I must now proceed to the next stage: surface realization. I will provide the surface realization worker with the original data, the ordered facts, the structured text, and clear instructions to generate a fluent, coherent, and natural paragraph that covers all the information without omission or hallucination. \n\nWorker Input: - Original Data: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\n- Ordered Facts: ['Bananaman | creator | Steve_Bright', 'Bananaman | starring | Bill_Oddie', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC', 'BBC | city | Broadcasting_House']\n- Structured Text:\n<paragraph>\n  <snt>\n    Bananaman | creator | Steve_Bright\n    Bananaman | starring | Bill_Oddie\n  </snt>\n  <snt>\n    Bananaman | lastAired | \"1986-04-15\"\n    Bananaman | broadcastedBy | BBC\n  </snt>\n  <snt>\n    BBC | city | Broadcasting_House\n  </snt>\n</paragraph>\n- No prior guardrail feedback for this stage.', instruction='- Using the structured text and all provided data, generate a fluent, coherent, and natural paragraph that includes all facts without omission or hallucination.\n- Ensure the text is grammatically correct, easy to read, and clearly presents the relationships between entities.\n- Do not add any information not present in the data.\n- The final output should be a single, well-formed paragraph suitable for end-user consumption. \n\nWorker Output: Bananaman was created by Steve Bright and starred Bill Oddie. The show last aired on April 15, 1986, and was broadcast by the BBC, which is based at Broadcasting House.\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "finalizer",
            "agent_input": "\nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['BBC | city | Broadcasting_House', 'Bananaman | starring | Bill_Oddie', 'Bananaman | creator | Steve_Bright', 'Bananaman | lastAired | \"1986-04-15\"', 'Bananaman | broadcastedBy | BBC']\nOutput: ",
            "agent_output": "Bananaman was created by Steve Bright and starred Bill Oddie. The show last aired on April 15, 1986, and was broadcast by the BBC, which is based at Broadcasting House.",
            "rationale": null
        }
    ]
}