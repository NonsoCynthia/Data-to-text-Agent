{
    "user_prompt": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\nOutput: ",
    "final_response": "Super Capers stars Adam West and is distributed by both Roadside Attractions and Lionsgate.",
    "next_agent": "orchestrator",
    "next_agent_payload": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\nOutput: ",
    "review": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
    "iteration_count": 9,
    "max_iteration": 60,
    "history_of_steps": [
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\nOutput: \n\nASSIGNMENT: \n",
            "agent_output": "content ordering(input='- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence for narrative text generation. Ensure all information is included and no data is omitted or added.', instruction='- Review the provided RDF triples.\n- Arrange the content in a logical order suitable for a coherent text (e.g., introduce the movie, mention the starring actor, then list the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the ordered content as a list or structured outline, ready for the next stage (Text Structuring).')",
            "rationale": "The user has provided a set of RDF triples from the WebNLG dataset, detailing the movie \"Super Capers\" with its starring actor and two distributors. According to the workflow, the first step is Content Ordering, where the information should be logically sequenced to form a coherent narrative. No prior pipeline results or guardrail feedback exist yet, so I will assign the 'content ordering' worker. The worker should ensure all data points are included and logically ordered, typically starting with the movie, followed by the starring actor, and then the distributors. \nInstruction:\n- Review the provided RDF triples.\n- Arrange the content in a logical order suitable for a coherent text (e.g., introduce the movie, mention the starring actor, then list the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the ordered content as a list or structured outline, ready for the next stage (Text Structuring)."
        },
        {
            "agent_name": "content ordering",
            "agent_input": "- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence for narrative text generation. Ensure all information is included and no data is omitted or added. \nAdditional Instruction: - Review the provided RDF triples.\n- Arrange the content in a logical order suitable for a coherent text (e.g., introduce the movie, mention the starring actor, then list the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the ordered content as a list or structured outline, ready for the next stage (Text Structuring).",
            "agent_output": [
                "Super_Capers | starring | Adam_West",
                "Super_Capers | distributor | Roadside_Attractions",
                "Super_Capers | distributor | Lionsgate"
            ],
            "rationale": [
                "Super_Capers | starring | Adam_West",
                "Super_Capers | distributor | Roadside_Attractions",
                "Super_Capers | distributor | Lionsgate"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The user has provided a set of RDF triples from the WebNLG dataset, detailing the movie \"Super Capers\" with its starring actor and two distributors. According to the workflow, the first step is Content Ordering, where the information should be logically sequenced to form a coherent narrative. No prior pipeline results or guardrail feedback exist yet, so I will assign the 'content ordering' worker. The worker should ensure all data points are included and logically ordered, typically starting with the movie, followed by the starring actor, and then the distributors. \nInstruction:\n- Review the provided RDF triples.\n- Arrange the content in a logical order suitable for a coherent text (e.g., introduce the movie, mention the starring actor, then list the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the ordered content as a list or structured outline, ready for the next stage (Text Structuring). \n\nWorker Input: - Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence for narrative text generation. Ensure all information is included and no data is omitted or added.', instruction='- Review the provided RDF triples.\n- Arrange the content in a logical order suitable for a coherent text (e.g., introduce the movie, mention the starring actor, then list the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the ordered content as a list or structured outline, ready for the next stage (Text Structuring). \n\nWorker Output: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence for narrative text generation. Ensure all information is included and no data is omitted or added.', instruction='- Review the provided RDF triples.\n- Arrange the content in a logical order suitable for a coherent text (e.g., introduce the movie, mention the starring actor, then list the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the ordered content as a list or structured outline, ready for the next stage (Text Structuring).')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:CONTENT ORDERING_2 ===##\n-- AGENT TYPE: content ordering\n-- AGENT NAME: content ordering\n-- INPUT START --\n- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical sequence for narrative text generation. Ensure all information is included and no data is omitted or added. \nAdditional Instruction: - Review the provided RDF triples.\n- Arrange the content in a logical order suitable for a coherent text (e.g., introduce the movie, mention the starring actor, then list the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the ordered content as a list or structured outline, ready for the next stage (Text Structuring).\n-- INPUT END --\n-- OUTPUT START --\n['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n-- OUTPUT END --\n##=== END:CONTENT ORDERING_2 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "text structuring(input='- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Ordered Content: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear textual format (e.g., paragraph or list) that groups related information and prepares it for fluent natural language generation. Ensure all data is included and nothing is omitted or added.', instruction='- Organize the ordered content into a structured textual format, such as a paragraph or bullet points.\n- Group related information logically (e.g., mention the movie, then the starring actor, then the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the structured text, ready for the surface realization stage.')",
            "rationale": "The content ordering stage has been completed correctly, as confirmed by the guardrail feedback ('CORRECT'). The data is logically ordered: first introducing the movie, then the starring actor, followed by the distributors. The next step is to proceed to the text structuring stage. The text structuring worker should now organize this ordered content into a clear textual structure, such as a paragraph or list, ensuring all information is included and ready for surface realization. \nInstruction:\n- Organize the ordered content into a structured textual format, such as a paragraph or bullet points.\n- Group related information logically (e.g., mention the movie, then the starring actor, then the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the structured text, ready for the surface realization stage."
        },
        {
            "agent_name": "text structuring",
            "agent_input": "- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Ordered Content: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear textual format (e.g., paragraph or list) that groups related information and prepares it for fluent natural language generation. Ensure all data is included and nothing is omitted or added. \nAdditional Instruction: - Organize the ordered content into a structured textual format, such as a paragraph or bullet points.\n- Group related information logically (e.g., mention the movie, then the starring actor, then the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the structured text, ready for the surface realization stage.",
            "agent_output": "<paragraph>\n  <snt>\n    Super_Capers | starring | Adam_West\n  </snt>\n  <snt>\n    Super_Capers | distributor | Roadside_Attractions\n    Super_Capers | distributor | Lionsgate\n  </snt>\n</paragraph>",
            "rationale": "<paragraph>\n  <snt>\n    Super_Capers | starring | Adam_West\n  </snt>\n  <snt>\n    Super_Capers | distributor | Roadside_Attractions\n    Super_Capers | distributor | Lionsgate\n  </snt>\n</paragraph>"
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The content ordering stage has been completed correctly, as confirmed by the guardrail feedback ('CORRECT'). The data is logically ordered: first introducing the movie, then the starring actor, followed by the distributors. The next step is to proceed to the text structuring stage. The text structuring worker should now organize this ordered content into a clear textual structure, such as a paragraph or list, ensuring all information is included and ready for surface realization. \nInstruction:\n- Organize the ordered content into a structured textual format, such as a paragraph or bullet points.\n- Group related information logically (e.g., mention the movie, then the starring actor, then the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the structured text, ready for the surface realization stage. \n\nWorker Input: - Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Ordered Content: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear textual format (e.g., paragraph or list) that groups related information and prepares it for fluent natural language generation. Ensure all data is included and nothing is omitted or added.', instruction='- Organize the ordered content into a structured textual format, such as a paragraph or bullet points.\n- Group related information logically (e.g., mention the movie, then the starring actor, then the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the structured text, ready for the surface realization stage. \n\nWorker Output: <paragraph>\n  <snt>\n    Super_Capers | starring | Adam_West\n  </snt>\n  <snt>\n    Super_Capers | distributor | Roadside_Attractions\n    Super_Capers | distributor | Lionsgate\n  </snt>\n</paragraph>\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ntext structuring(input='- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Ordered Content: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear textual format (e.g., paragraph or list) that groups related information and prepares it for fluent natural language generation. Ensure all data is included and nothing is omitted or added.', instruction='- Organize the ordered content into a structured textual format, such as a paragraph or bullet points.\n- Group related information logically (e.g., mention the movie, then the starring actor, then the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the structured text, ready for the surface realization stage.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:TEXT STRUCTURING_4 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Ordered Content: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear textual format (e.g., paragraph or list) that groups related information and prepares it for fluent natural language generation. Ensure all data is included and nothing is omitted or added. \nAdditional Instruction: - Organize the ordered content into a structured textual format, such as a paragraph or bullet points.\n- Group related information logically (e.g., mention the movie, then the starring actor, then the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the structured text, ready for the surface realization stage.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Super_Capers | starring | Adam_West\n  </snt>\n  <snt>\n    Super_Capers | distributor | Roadside_Attractions\n    Super_Capers | distributor | Lionsgate\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_4 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "surface realization(input='- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Structured Content: \n<paragraph>\n  <snt>\n    Super_Capers | starring | Adam_West\n  </snt>\n  <snt>\n    Super_Capers | distributor | Roadside_Attractions\n    Super_Capers | distributor | Lionsgate\n  </snt>\n</paragraph>\n- Guardrail Feedback: Previous stage marked as 'CORRECT'.\n- Task: Convert the structured content into fluent, natural English text. Ensure all information is included, no data is omitted or added, and the result is clear and easy to read.', instruction='- Transform the structured content into a well-formed, fluent paragraph.\n- Clearly state that \"Super Capers\" stars Adam West and is distributed by both Roadside Attractions and Lionsgate.\n- Do not omit any information or introduce new facts.\n- Ensure the text is grammatically correct, coherent, and natural-sounding.')",
            "rationale": "The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all data has been included, grouped logically, and no information has been omitted or hallucinated. The next step is surface realization, where the structured content will be transformed into fluent, natural language text. I will provide the original data, the structured content, and clear instructions to ensure the final output is coherent, readable, and faithful to the input. \nInstruction:\n- Transform the structured content into a well-formed, fluent paragraph.\n- Clearly state that \"Super Capers\" stars Adam West and is distributed by both Roadside Attractions and Lionsgate.\n- Do not omit any information or introduce new facts.\n- Ensure the text is grammatically correct, coherent, and natural-sounding."
        },
        {
            "agent_name": "surface realization",
            "agent_input": "- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Structured Content: \n<paragraph>\n  <snt>\n    Super_Capers | starring | Adam_West\n  </snt>\n  <snt>\n    Super_Capers | distributor | Roadside_Attractions\n    Super_Capers | distributor | Lionsgate\n  </snt>\n</paragraph>\n- Guardrail Feedback: Previous stage marked as 'CORRECT'.\n- Task: Convert the structured content into fluent, natural English text. Ensure all information is included, no data is omitted or added, and the result is clear and easy to read. \nAdditional Instruction: - Transform the structured content into a well-formed, fluent paragraph.\n- Clearly state that \"Super Capers\" stars Adam West and is distributed by both Roadside Attractions and Lionsgate.\n- Do not omit any information or introduce new facts.\n- Ensure the text is grammatically correct, coherent, and natural-sounding.",
            "agent_output": "Super Capers stars Adam West and is distributed by both Roadside Attractions and Lionsgate.",
            "rationale": "Super Capers stars Adam West and is distributed by both Roadside Attractions and Lionsgate."
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all data has been included, grouped logically, and no information has been omitted or hallucinated. The next step is surface realization, where the structured content will be transformed into fluent, natural language text. I will provide the original data, the structured content, and clear instructions to ensure the final output is coherent, readable, and faithful to the input. \nInstruction:\n- Transform the structured content into a well-formed, fluent paragraph.\n- Clearly state that \"Super Capers\" stars Adam West and is distributed by both Roadside Attractions and Lionsgate.\n- Do not omit any information or introduce new facts.\n- Ensure the text is grammatically correct, coherent, and natural-sounding. \n\nWorker Input: - Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Structured Content: \n<paragraph>\n  <snt>\n    Super_Capers | starring | Adam_West\n  </snt>\n  <snt>\n    Super_Capers | distributor | Roadside_Attractions\n    Super_Capers | distributor | Lionsgate\n  </snt>\n</paragraph>\n- Guardrail Feedback: Previous stage marked as 'CORRECT'.\n- Task: Convert the structured content into fluent, natural English text. Ensure all information is included, no data is omitted or added, and the result is clear and easy to read.', instruction='- Transform the structured content into a well-formed, fluent paragraph.\n- Clearly state that \"Super Capers\" stars Adam West and is distributed by both Roadside Attractions and Lionsgate.\n- Do not omit any information or introduce new facts.\n- Ensure the text is grammatically correct, coherent, and natural-sounding. \n\nWorker Output: Super Capers stars Adam West and is distributed by both Roadside Attractions and Lionsgate.\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "finalizer",
            "agent_input": "Generate a response to the provided objective as if you are responding to the original user.\n\n*** Input Context ***\n\nCOMPLETED STEPS: ##=== BEGIN:TEXT STRUCTURING_1 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Ordered Content: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- No prior guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear textual format (e.g., paragraph or list) that groups related information and prepares it for fluent natural language generation. Ensure all data is included and nothing is omitted or added. \nAdditional Instruction: - Organize the ordered content into a structured textual format, such as a paragraph or bullet points.\n- Group related information logically (e.g., mention the movie, then the starring actor, then the distributors).\n- Do not omit any data or introduce information not present in the input.\n- Output the structured text, ready for the surface realization stage.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Super_Capers | starring | Adam_West\n  </snt>\n  <snt>\n    Super_Capers | distributor | Roadside_Attractions\n    Super_Capers | distributor | Lionsgate\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_1 ===##\n\n##=== BEGIN:SURFACE REALIZATION_2 ===##\n-- AGENT TYPE: surface realization\n-- AGENT NAME: surface realization\n-- INPUT START --\n- Original Data: ['Super_Capers | starring | Adam_West', 'Super_Capers | distributor | Roadside_Attractions', 'Super_Capers | distributor | Lionsgate']\n- Structured Content: \n<paragraph>\n  <snt>\n    Super_Capers | starring | Adam_West\n  </snt>\n  <snt>\n    Super_Capers | distributor | Roadside_Attractions\n    Super_Capers | distributor | Lionsgate\n  </snt>\n</paragraph>\n- Guardrail Feedback: Previous stage marked as 'CORRECT'.\n- Task: Convert the structured content into fluent, natural English text. Ensure all information is included, no data is omitted or added, and the result is clear and easy to read. \nAdditional Instruction: - Transform the structured content into a well-formed, fluent paragraph.\n- Clearly state that \"Super Capers\" stars Adam West and is distributed by both Roadside Attractions and Lionsgate.\n- Do not omit any information or introduce new facts.\n- Ensure the text is grammatically correct, coherent, and natural-sounding.\n-- INPUT END --\n-- OUTPUT START --\nSuper Capers stars Adam West and is distributed by both Roadside Attractions and Lionsgate.\n-- OUTPUT END --\nFinalizer Agent: Carefully review the output provided above by the surface realization agent. Edit and refine the text as a human would, ensuring maximum fluency, semantic adequacy, coherence, and naturalness. Your task is to produce the best possible final text, correcting any errors or awkwardness if present.\n##=== END:SURFACE REALIZATION_2 ===##\n\n*** Output Format ***\nFinal Answer: \n",
            "agent_output": "Super Capers stars Adam West and is distributed by both Roadside Attractions and Lionsgate.",
            "rationale": null
        }
    ]
}