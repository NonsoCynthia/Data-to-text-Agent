{
    "user_prompt": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\nOutput: ",
    "final_response": "\"Expect a Miracle\" is an instrumental music album that was followed by \"Afterplay (Brian Kelly album).\"",
    "next_agent": "orchestrator",
    "next_agent_payload": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\nOutput: ",
    "review": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
    "iteration_count": 9,
    "max_iteration": 60,
    "history_of_steps": [
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\nOutput: \n\nASSIGNMENT: \n",
            "agent_output": "content ordering(input='- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative in the final text. Do not omit any data or add any information not present in the input.', instruction='- Review the two provided facts about \"Expect a Miracle.\"\n- Arrange them in an order that would make sense for a short descriptive text (e.g., typically, genre information precedes discography/chronology details).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Ensure no information is omitted or added.')",
            "rationale": "The user has provided two RDF triples from the WebNLG dataset. The first triple states that \"Expect a Miracle\" has the genre \"Instrumental music,\" and the second triple states that \"Expect a Miracle\" is followed by \"Afterplay (Brian Kelly album).\" According to the workflow policy, the first step is Content Ordering. I need to organize these facts into a logical sequence for a coherent narrative. No previous pipeline results or guardrail feedback exist yet, so I will proceed to assign the 'content ordering' worker. The worker should ensure that all data fields are included and that the order supports a natural flow for subsequent text structuring. \nInstruction:\n- Review the two provided facts about \"Expect a Miracle.\"\n- Arrange them in an order that would make sense for a short descriptive text (e.g., typically, genre information precedes discography/chronology details).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Ensure no information is omitted or added."
        },
        {
            "agent_name": "content ordering",
            "agent_input": "- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative in the final text. Do not omit any data or add any information not present in the input. \nAdditional Instruction: - Review the two provided facts about \"Expect a Miracle.\"\n- Arrange them in an order that would make sense for a short descriptive text (e.g., typically, genre information precedes discography/chronology details).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Ensure no information is omitted or added.",
            "agent_output": [
                "Expect_a_Miracle | genre | Instrumental_music",
                "Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)"
            ],
            "rationale": [
                "Expect_a_Miracle | genre | Instrumental_music",
                "Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The user has provided two RDF triples from the WebNLG dataset. The first triple states that \"Expect a Miracle\" has the genre \"Instrumental music,\" and the second triple states that \"Expect a Miracle\" is followed by \"Afterplay (Brian Kelly album).\" According to the workflow policy, the first step is Content Ordering. I need to organize these facts into a logical sequence for a coherent narrative. No previous pipeline results or guardrail feedback exist yet, so I will proceed to assign the 'content ordering' worker. The worker should ensure that all data fields are included and that the order supports a natural flow for subsequent text structuring. \nInstruction:\n- Review the two provided facts about \"Expect a Miracle.\"\n- Arrange them in an order that would make sense for a short descriptive text (e.g., typically, genre information precedes discography/chronology details).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Ensure no information is omitted or added. \n\nWorker Input: - Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative in the final text. Do not omit any data or add any information not present in the input.', instruction='- Review the two provided facts about \"Expect a Miracle.\"\n- Arrange them in an order that would make sense for a short descriptive text (e.g., typically, genre information precedes discography/chronology details).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Ensure no information is omitted or added. \n\nWorker Output: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative in the final text. Do not omit any data or add any information not present in the input.', instruction='- Review the two provided facts about \"Expect a Miracle.\"\n- Arrange them in an order that would make sense for a short descriptive text (e.g., typically, genre information precedes discography/chronology details).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Ensure no information is omitted or added.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:CONTENT ORDERING_2 ===##\n-- AGENT TYPE: content ordering\n-- AGENT NAME: content ordering\n-- INPUT START --\n- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative in the final text. Do not omit any data or add any information not present in the input. \nAdditional Instruction: - Review the two provided facts about \"Expect a Miracle.\"\n- Arrange them in an order that would make sense for a short descriptive text (e.g., typically, genre information precedes discography/chronology details).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Ensure no information is omitted or added.\n-- INPUT END --\n-- OUTPUT START --\n['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n-- OUTPUT END --\n##=== END:CONTENT ORDERING_2 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "text structuring(input='- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Ordered Facts: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback beyond confirmation of correct ordering.\n- Task: Organize the ordered facts into a clear and coherent textual structure (e.g., a well-formed paragraph or list) that will serve as the basis for fluent natural language generation in the next stage.\n- Ensure that all information from the ordered facts is included and that no extra information is added.', instruction='- Transform the ordered facts into a structured text format, such as a paragraph or bullet points, that clearly presents all the information.\n- Do not omit any data or add any information not present in the input.\n- Make sure the structure is logical and will support fluent surface realization in the next stage.')",
            "rationale": "The content ordering stage has been completed correctly, as confirmed by the guardrail feedback (\"CORRECT\"). The facts are logically ordered, with genre information preceding discography details. The next step is to proceed to the text structuring stage, where the ordered facts will be organized into a coherent textual structure, such as a paragraph or list, without omitting any information or introducing hallucinations. \nInstruction:\n- Transform the ordered facts into a structured text format, such as a paragraph or bullet points, that clearly presents all the information.\n- Do not omit any data or add any information not present in the input.\n- Make sure the structure is logical and will support fluent surface realization in the next stage."
        },
        {
            "agent_name": "text structuring",
            "agent_input": "- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Ordered Facts: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback beyond confirmation of correct ordering.\n- Task: Organize the ordered facts into a clear and coherent textual structure (e.g., a well-formed paragraph or list) that will serve as the basis for fluent natural language generation in the next stage.\n- Ensure that all information from the ordered facts is included and that no extra information is added. \nAdditional Instruction: - Transform the ordered facts into a structured text format, such as a paragraph or bullet points, that clearly presents all the information.\n- Do not omit any data or add any information not present in the input.\n- Make sure the structure is logical and will support fluent surface realization in the next stage.",
            "agent_output": "<paragraph>\n  <snt>\n    Expect_a_Miracle | genre | Instrumental_music\n    Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)\n  </snt>\n</paragraph>",
            "rationale": "<paragraph>\n  <snt>\n    Expect_a_Miracle | genre | Instrumental_music\n    Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)\n  </snt>\n</paragraph>"
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The content ordering stage has been completed correctly, as confirmed by the guardrail feedback (\"CORRECT\"). The facts are logically ordered, with genre information preceding discography details. The next step is to proceed to the text structuring stage, where the ordered facts will be organized into a coherent textual structure, such as a paragraph or list, without omitting any information or introducing hallucinations. \nInstruction:\n- Transform the ordered facts into a structured text format, such as a paragraph or bullet points, that clearly presents all the information.\n- Do not omit any data or add any information not present in the input.\n- Make sure the structure is logical and will support fluent surface realization in the next stage. \n\nWorker Input: - Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Ordered Facts: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback beyond confirmation of correct ordering.\n- Task: Organize the ordered facts into a clear and coherent textual structure (e.g., a well-formed paragraph or list) that will serve as the basis for fluent natural language generation in the next stage.\n- Ensure that all information from the ordered facts is included and that no extra information is added.', instruction='- Transform the ordered facts into a structured text format, such as a paragraph or bullet points, that clearly presents all the information.\n- Do not omit any data or add any information not present in the input.\n- Make sure the structure is logical and will support fluent surface realization in the next stage. \n\nWorker Output: <paragraph>\n  <snt>\n    Expect_a_Miracle | genre | Instrumental_music\n    Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)\n  </snt>\n</paragraph>\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ntext structuring(input='- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Ordered Facts: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback beyond confirmation of correct ordering.\n- Task: Organize the ordered facts into a clear and coherent textual structure (e.g., a well-formed paragraph or list) that will serve as the basis for fluent natural language generation in the next stage.\n- Ensure that all information from the ordered facts is included and that no extra information is added.', instruction='- Transform the ordered facts into a structured text format, such as a paragraph or bullet points, that clearly presents all the information.\n- Do not omit any data or add any information not present in the input.\n- Make sure the structure is logical and will support fluent surface realization in the next stage.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:TEXT STRUCTURING_4 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Ordered Facts: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback beyond confirmation of correct ordering.\n- Task: Organize the ordered facts into a clear and coherent textual structure (e.g., a well-formed paragraph or list) that will serve as the basis for fluent natural language generation in the next stage.\n- Ensure that all information from the ordered facts is included and that no extra information is added. \nAdditional Instruction: - Transform the ordered facts into a structured text format, such as a paragraph or bullet points, that clearly presents all the information.\n- Do not omit any data or add any information not present in the input.\n- Make sure the structure is logical and will support fluent surface realization in the next stage.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Expect_a_Miracle | genre | Instrumental_music\n    Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_4 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "surface realization(input='- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Structured Text: \n<paragraph>\n  <snt>\n    Expect_a_Miracle | genre | Instrumental_music\n    Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)\n  </snt>\n</paragraph>\n- No prior pipeline results or guardrail feedback beyond confirmation of correct structuring.\n- Task: Generate a fluent, natural, and grammatically correct sentence or paragraph that expresses all the information from the structured text, ensuring that no information is omitted or invented.', instruction='- Convert the structured text into a well-formed, fluent English sentence or paragraph.\n- Ensure that both facts are clearly and accurately expressed: (1) \"Expect a Miracle\" is an instrumental music album, and (2) it was followed by \"Afterplay (Brian Kelly album)\".\n- Do not add any information not present in the input.\n- The output should be clear, natural, and free of grammatical errors.')",
            "rationale": "The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all information is present, logically structured, and no extra information was added. According to the workflow policy, I should now proceed to the surface realization stage. The surface realization worker will be provided with the original data, the structured text, and the instruction to generate a fluent, coherent, and grammatically correct sentence or paragraph that accurately reflects all the input facts without hallucination or omission. \nInstruction:\n- Convert the structured text into a well-formed, fluent English sentence or paragraph.\n- Ensure that both facts are clearly and accurately expressed: (1) \"Expect a Miracle\" is an instrumental music album, and (2) it was followed by \"Afterplay (Brian Kelly album)\".\n- Do not add any information not present in the input.\n- The output should be clear, natural, and free of grammatical errors."
        },
        {
            "agent_name": "surface realization",
            "agent_input": "- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Structured Text: \n<paragraph>\n  <snt>\n    Expect_a_Miracle | genre | Instrumental_music\n    Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)\n  </snt>\n</paragraph>\n- No prior pipeline results or guardrail feedback beyond confirmation of correct structuring.\n- Task: Generate a fluent, natural, and grammatically correct sentence or paragraph that expresses all the information from the structured text, ensuring that no information is omitted or invented. \nAdditional Instruction: - Convert the structured text into a well-formed, fluent English sentence or paragraph.\n- Ensure that both facts are clearly and accurately expressed: (1) \"Expect a Miracle\" is an instrumental music album, and (2) it was followed by \"Afterplay (Brian Kelly album)\".\n- Do not add any information not present in the input.\n- The output should be clear, natural, and free of grammatical errors.",
            "agent_output": "\"Expect a Miracle\" is an instrumental music album that was followed by \"Afterplay (Brian Kelly album).\"",
            "rationale": "\"Expect a Miracle\" is an instrumental music album that was followed by \"Afterplay (Brian Kelly album).\""
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all information is present, logically structured, and no extra information was added. According to the workflow policy, I should now proceed to the surface realization stage. The surface realization worker will be provided with the original data, the structured text, and the instruction to generate a fluent, coherent, and grammatically correct sentence or paragraph that accurately reflects all the input facts without hallucination or omission. \nInstruction:\n- Convert the structured text into a well-formed, fluent English sentence or paragraph.\n- Ensure that both facts are clearly and accurately expressed: (1) \"Expect a Miracle\" is an instrumental music album, and (2) it was followed by \"Afterplay (Brian Kelly album)\".\n- Do not add any information not present in the input.\n- The output should be clear, natural, and free of grammatical errors. \n\nWorker Input: - Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Structured Text: \n<paragraph>\n  <snt>\n    Expect_a_Miracle | genre | Instrumental_music\n    Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)\n  </snt>\n</paragraph>\n- No prior pipeline results or guardrail feedback beyond confirmation of correct structuring.\n- Task: Generate a fluent, natural, and grammatically correct sentence or paragraph that expresses all the information from the structured text, ensuring that no information is omitted or invented.', instruction='- Convert the structured text into a well-formed, fluent English sentence or paragraph.\n- Ensure that both facts are clearly and accurately expressed: (1) \"Expect a Miracle\" is an instrumental music album, and (2) it was followed by \"Afterplay (Brian Kelly album)\".\n- Do not add any information not present in the input.\n- The output should be clear, natural, and free of grammatical errors. \n\nWorker Output: \"Expect a Miracle\" is an instrumental music album that was followed by \"Afterplay (Brian Kelly album).\"\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "finalizer",
            "agent_input": "Generate a response to the provided objective as if you are responding to the original user.\n\n*** Input Context ***\n\nCOMPLETED STEPS: ##=== BEGIN:TEXT STRUCTURING_1 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Ordered Facts: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- No prior pipeline results or guardrail feedback beyond confirmation of correct ordering.\n- Task: Organize the ordered facts into a clear and coherent textual structure (e.g., a well-formed paragraph or list) that will serve as the basis for fluent natural language generation in the next stage.\n- Ensure that all information from the ordered facts is included and that no extra information is added. \nAdditional Instruction: - Transform the ordered facts into a structured text format, such as a paragraph or bullet points, that clearly presents all the information.\n- Do not omit any data or add any information not present in the input.\n- Make sure the structure is logical and will support fluent surface realization in the next stage.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Expect_a_Miracle | genre | Instrumental_music\n    Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_1 ===##\n\n##=== BEGIN:SURFACE REALIZATION_2 ===##\n-- AGENT TYPE: surface realization\n-- AGENT NAME: surface realization\n-- INPUT START --\n- Original Data: ['Expect_a_Miracle | genre | Instrumental_music', 'Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)']\n- Structured Text: \n<paragraph>\n  <snt>\n    Expect_a_Miracle | genre | Instrumental_music\n    Expect_a_Miracle | followedBy | Afterplay_(Brian_Kelly_album)\n  </snt>\n</paragraph>\n- No prior pipeline results or guardrail feedback beyond confirmation of correct structuring.\n- Task: Generate a fluent, natural, and grammatically correct sentence or paragraph that expresses all the information from the structured text, ensuring that no information is omitted or invented. \nAdditional Instruction: - Convert the structured text into a well-formed, fluent English sentence or paragraph.\n- Ensure that both facts are clearly and accurately expressed: (1) \"Expect a Miracle\" is an instrumental music album, and (2) it was followed by \"Afterplay (Brian Kelly album)\".\n- Do not add any information not present in the input.\n- The output should be clear, natural, and free of grammatical errors.\n-- INPUT END --\n-- OUTPUT START --\n\"Expect a Miracle\" is an instrumental music album that was followed by \"Afterplay (Brian Kelly album).\"\n-- OUTPUT END --\nFinalizer Agent: Carefully review the output provided above by the surface realization agent. Edit and refine the text as a human would, ensuring maximum fluency, semantic adequacy, coherence, and naturalness. Your task is to produce the best possible final text, correcting any errors or awkwardness if present.\n##=== END:SURFACE REALIZATION_2 ===##\n\n*** Output Format ***\nFinal Answer: \n",
            "agent_output": "\"Expect a Miracle\" is an instrumental music album that was followed by \"Afterplay (Brian Kelly album).\"",
            "rationale": null
        }
    ]
}