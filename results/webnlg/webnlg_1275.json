{
    "user_prompt": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language', 'Super_Capers | runtime | 98.0']\nOutput: ",
    "final_response": "Super Capers is an English-language film with a runtime of 98 minutes. The movie stars Michael Rooker and Tom Sizemore.",
    "next_agent": "orchestrator",
    "next_agent_payload": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language', 'Super_Capers | runtime | 98.0']\nOutput: ",
    "review": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
    "iteration_count": 9,
    "max_iteration": 60,
    "history_of_steps": [
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language', 'Super_Capers | runtime | 98.0']\nOutput: \n\nASSIGNMENT: \n",
            "agent_output": "content ordering(input='Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nNo prior pipeline results or guardrail feedback.', instruction='Organize the provided data into a logical order suitable for generating a coherent and fluent text about the movie \"Super Capers.\" Ensure that all information is included and that the order supports a natural narrative flow (e.g., introduce the movie, mention its stars, language, and runtime). Do not omit any data or add any information not present in the input. Output the ordered content as a list or sequence, ready for the next stage.')",
            "rationale": "The user has provided a set of RDF triples about the movie \"Super Capers,\" including its starring actors, language, and runtime. According to the workflow policy, the first step is Content Ordering. I need to organize the data into a logical sequence that will support a coherent narrative. No prior pipeline results or guardrail feedback exist yet, so I will proceed to assign the 'content ordering' worker. The worker should ensure all data fields are included and no information is omitted or invented. \nInstruction:\nOrganize the provided data into a logical order suitable for generating a coherent and fluent text about the movie \"Super Capers.\" Ensure that all information is included and that the order supports a natural narrative flow (e.g., introduce the movie, mention its stars, language, and runtime). Do not omit any data or add any information not present in the input. Output the ordered content as a list or sequence, ready for the next stage."
        },
        {
            "agent_name": "content ordering",
            "agent_input": "Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nNo prior pipeline results or guardrail feedback. \nAdditional Instruction: Organize the provided data into a logical order suitable for generating a coherent and fluent text about the movie \"Super Capers.\" Ensure that all information is included and that the order supports a natural narrative flow (e.g., introduce the movie, mention its stars, language, and runtime). Do not omit any data or add any information not present in the input. Output the ordered content as a list or sequence, ready for the next stage.",
            "agent_output": [
                "Super_Capers | language | English_language",
                "Super_Capers | runtime | 98.0",
                "Super_Capers | starring | Michael_Rooker",
                "Super_Capers | starring | Tom_Sizemore"
            ],
            "rationale": [
                "Super_Capers | language | English_language",
                "Super_Capers | runtime | 98.0",
                "Super_Capers | starring | Michael_Rooker",
                "Super_Capers | starring | Tom_Sizemore"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The user has provided a set of RDF triples about the movie \"Super Capers,\" including its starring actors, language, and runtime. According to the workflow policy, the first step is Content Ordering. I need to organize the data into a logical sequence that will support a coherent narrative. No prior pipeline results or guardrail feedback exist yet, so I will proceed to assign the 'content ordering' worker. The worker should ensure all data fields are included and no information is omitted or invented. \nInstruction:\nOrganize the provided data into a logical order suitable for generating a coherent and fluent text about the movie \"Super Capers.\" Ensure that all information is included and that the order supports a natural narrative flow (e.g., introduce the movie, mention its stars, language, and runtime). Do not omit any data or add any information not present in the input. Output the ordered content as a list or sequence, ready for the next stage. \n\nWorker Input: Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nNo prior pipeline results or guardrail feedback.', instruction='Organize the provided data into a logical order suitable for generating a coherent and fluent text about the movie \"Super Capers.\" Ensure that all information is included and that the order supports a natural narrative flow (e.g., introduce the movie, mention its stars, language, and runtime). Do not omit any data or add any information not present in the input. Output the ordered content as a list or sequence, ready for the next stage. \n\nWorker Output: ['Super_Capers | language | English_language', 'Super_Capers | runtime | 98.0', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language', 'Super_Capers | runtime | 98.0']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nNo prior pipeline results or guardrail feedback.', instruction='Organize the provided data into a logical order suitable for generating a coherent and fluent text about the movie \"Super Capers.\" Ensure that all information is included and that the order supports a natural narrative flow (e.g., introduce the movie, mention its stars, language, and runtime). Do not omit any data or add any information not present in the input. Output the ordered content as a list or sequence, ready for the next stage.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:CONTENT ORDERING_2 ===##\n-- AGENT TYPE: content ordering\n-- AGENT NAME: content ordering\n-- INPUT START --\nOriginal Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nNo prior pipeline results or guardrail feedback. \nAdditional Instruction: Organize the provided data into a logical order suitable for generating a coherent and fluent text about the movie \"Super Capers.\" Ensure that all information is included and that the order supports a natural narrative flow (e.g., introduce the movie, mention its stars, language, and runtime). Do not omit any data or add any information not present in the input. Output the ordered content as a list or sequence, ready for the next stage.\n-- INPUT END --\n-- OUTPUT START --\n['Super_Capers | language | English_language', 'Super_Capers | runtime | 98.0', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n-- OUTPUT END --\n##=== END:CONTENT ORDERING_2 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "text structuring(input='Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nNo prior pipeline results or guardrail feedback beyond the confirmation that the ordering is correct.', instruction='- Structure the ordered content into a clear, organized textual format suitable for surface realization.\n- You may use a paragraph, bullet points, or another logical structure, but ensure all information is included and no extra information is added.\n- Prepare the structured content so that it is ready for the final surface realization stage, maintaining clarity and completeness.')",
            "rationale": "The content ordering stage has been completed and validated as correct by the guardrail feedback. The data is now logically ordered to support a coherent narrative: language, runtime, then starring actors. The next step is to structure this ordered content into an organized textual format, such as a paragraph or list, in preparation for fluent surface realization. I will assign the task to the 'text structuring' worker, providing the original data, the ordered content, and clear instructions to ensure all information is included and no extra information is added. \nInstruction:\n- Structure the ordered content into a clear, organized textual format suitable for surface realization.\n- You may use a paragraph, bullet points, or another logical structure, but ensure all information is included and no extra information is added.\n- Prepare the structured content so that it is ready for the final surface realization stage, maintaining clarity and completeness."
        },
        {
            "agent_name": "text structuring",
            "agent_input": "Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nNo prior pipeline results or guardrail feedback beyond the confirmation that the ordering is correct. \nAdditional Instruction: - Structure the ordered content into a clear, organized textual format suitable for surface realization.\n- You may use a paragraph, bullet points, or another logical structure, but ensure all information is included and no extra information is added.\n- Prepare the structured content so that it is ready for the final surface realization stage, maintaining clarity and completeness.",
            "agent_output": "<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n    Super_Capers | runtime | 98.0\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>",
            "rationale": "<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n    Super_Capers | runtime | 98.0\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>"
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The content ordering stage has been completed and validated as correct by the guardrail feedback. The data is now logically ordered to support a coherent narrative: language, runtime, then starring actors. The next step is to structure this ordered content into an organized textual format, such as a paragraph or list, in preparation for fluent surface realization. I will assign the task to the 'text structuring' worker, providing the original data, the ordered content, and clear instructions to ensure all information is included and no extra information is added. \nInstruction:\n- Structure the ordered content into a clear, organized textual format suitable for surface realization.\n- You may use a paragraph, bullet points, or another logical structure, but ensure all information is included and no extra information is added.\n- Prepare the structured content so that it is ready for the final surface realization stage, maintaining clarity and completeness. \n\nWorker Input: Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nNo prior pipeline results or guardrail feedback beyond the confirmation that the ordering is correct.', instruction='- Structure the ordered content into a clear, organized textual format suitable for surface realization.\n- You may use a paragraph, bullet points, or another logical structure, but ensure all information is included and no extra information is added.\n- Prepare the structured content so that it is ready for the final surface realization stage, maintaining clarity and completeness. \n\nWorker Output: <paragraph>\n  <snt>\n    Super_Capers | language | English_language\n    Super_Capers | runtime | 98.0\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language', 'Super_Capers | runtime | 98.0']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ntext structuring(input='Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nNo prior pipeline results or guardrail feedback beyond the confirmation that the ordering is correct.', instruction='- Structure the ordered content into a clear, organized textual format suitable for surface realization.\n- You may use a paragraph, bullet points, or another logical structure, but ensure all information is included and no extra information is added.\n- Prepare the structured content so that it is ready for the final surface realization stage, maintaining clarity and completeness.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:TEXT STRUCTURING_4 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\nOriginal Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nNo prior pipeline results or guardrail feedback beyond the confirmation that the ordering is correct. \nAdditional Instruction: - Structure the ordered content into a clear, organized textual format suitable for surface realization.\n- You may use a paragraph, bullet points, or another logical structure, but ensure all information is included and no extra information is added.\n- Prepare the structured content so that it is ready for the final surface realization stage, maintaining clarity and completeness.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n    Super_Capers | runtime | 98.0\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_4 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "surface realization(input='Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nStructured Content:\n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n    Super_Capers | runtime | 98.0\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n\nNo prior guardrail feedback for this stage.\nYour task is to realize the above structured content into fluent, natural English text, ensuring all information is included and no extra information is added.', instruction='- Convert the structured content into a fluent, grammatically correct paragraph.\n- Mention that \"Super Capers\" is in the English language, has a runtime of 98 minutes, and stars Michael Rooker and Tom Sizemore.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is clear, natural, and free of awkward phrasing.')",
            "rationale": "The text structuring stage has been completed, and the guardrail feedback is 'CORRECT', indicating that the structured content is clear, organized, and complete. The next step in the pipeline is surface realization, where the structured content will be transformed into fluent, natural language text. I will provide the surface realization worker with the original data, the ordered content, the structured content, and clear instructions to ensure all information is included without hallucination or omission. \nInstruction:\n- Convert the structured content into a fluent, grammatically correct paragraph.\n- Mention that \"Super Capers\" is in the English language, has a runtime of 98 minutes, and stars Michael Rooker and Tom Sizemore.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is clear, natural, and free of awkward phrasing."
        },
        {
            "agent_name": "surface realization",
            "agent_input": "Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nStructured Content:\n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n    Super_Capers | runtime | 98.0\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n\nNo prior guardrail feedback for this stage.\nYour task is to realize the above structured content into fluent, natural English text, ensuring all information is included and no extra information is added. \nAdditional Instruction: - Convert the structured content into a fluent, grammatically correct paragraph.\n- Mention that \"Super Capers\" is in the English language, has a runtime of 98 minutes, and stars Michael Rooker and Tom Sizemore.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is clear, natural, and free of awkward phrasing.",
            "agent_output": "Super Capers is an English-language film with a runtime of 98 minutes. The movie stars Michael Rooker and Tom Sizemore.",
            "rationale": "Super Capers is an English-language film with a runtime of 98 minutes. The movie stars Michael Rooker and Tom Sizemore."
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The text structuring stage has been completed, and the guardrail feedback is 'CORRECT', indicating that the structured content is clear, organized, and complete. The next step in the pipeline is surface realization, where the structured content will be transformed into fluent, natural language text. I will provide the surface realization worker with the original data, the ordered content, the structured content, and clear instructions to ensure all information is included without hallucination or omission. \nInstruction:\n- Convert the structured content into a fluent, grammatically correct paragraph.\n- Mention that \"Super Capers\" is in the English language, has a runtime of 98 minutes, and stars Michael Rooker and Tom Sizemore.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is clear, natural, and free of awkward phrasing. \n\nWorker Input: Original Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nStructured Content:\n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n    Super_Capers | runtime | 98.0\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n\nNo prior guardrail feedback for this stage.\nYour task is to realize the above structured content into fluent, natural English text, ensuring all information is included and no extra information is added.', instruction='- Convert the structured content into a fluent, grammatically correct paragraph.\n- Mention that \"Super Capers\" is in the English language, has a runtime of 98 minutes, and stars Michael Rooker and Tom Sizemore.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is clear, natural, and free of awkward phrasing. \n\nWorker Output: Super Capers is an English-language film with a runtime of 98 minutes. The movie stars Michael Rooker and Tom Sizemore.\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "finalizer",
            "agent_input": "Generate a response to the provided objective as if you are responding to the original user.\n\n*** Input Context ***\n\nCOMPLETED STEPS: ##=== BEGIN:TEXT STRUCTURING_1 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\nOriginal Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nNo prior pipeline results or guardrail feedback beyond the confirmation that the ordering is correct. \nAdditional Instruction: - Structure the ordered content into a clear, organized textual format suitable for surface realization.\n- You may use a paragraph, bullet points, or another logical structure, but ensure all information is included and no extra information is added.\n- Prepare the structured content so that it is ready for the final surface realization stage, maintaining clarity and completeness.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n    Super_Capers | runtime | 98.0\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_1 ===##\n\n##=== BEGIN:SURFACE REALIZATION_2 ===##\n-- AGENT TYPE: surface realization\n-- AGENT NAME: surface realization\n-- INPUT START --\nOriginal Data: \n['Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore', \n 'Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0']\n\nOrdered Content: \n['Super_Capers | language | English_language', \n 'Super_Capers | runtime | 98.0', \n 'Super_Capers | starring | Michael_Rooker', \n 'Super_Capers | starring | Tom_Sizemore']\n\nStructured Content:\n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n    Super_Capers | runtime | 98.0\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n\nNo prior guardrail feedback for this stage.\nYour task is to realize the above structured content into fluent, natural English text, ensuring all information is included and no extra information is added. \nAdditional Instruction: - Convert the structured content into a fluent, grammatically correct paragraph.\n- Mention that \"Super Capers\" is in the English language, has a runtime of 98 minutes, and stars Michael Rooker and Tom Sizemore.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is clear, natural, and free of awkward phrasing.\n-- INPUT END --\n-- OUTPUT START --\nSuper Capers is an English-language film with a runtime of 98 minutes. The movie stars Michael Rooker and Tom Sizemore.\n-- OUTPUT END --\nFinalizer Agent: Carefully review the output provided above by the surface realization agent. Edit and refine the text as a human would, ensuring maximum fluency, semantic adequacy, coherence, and naturalness. Your task is to produce the best possible final text, correcting any errors or awkwardness if present.\n##=== END:SURFACE REALIZATION_2 ===##\n\n*** Output Format ***\nFinal Answer: \n",
            "agent_output": "Super Capers is an English-language film with a runtime of 98 minutes. The movie stars Michael Rooker and Tom Sizemore.",
            "rationale": null
        }
    ]
}