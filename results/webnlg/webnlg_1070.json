{
    "user_prompt": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\nOutput: ",
    "final_response": "Super Capers is an English-language film starring Michael Rooker and Tom Sizemore.",
    "next_agent": "orchestrator",
    "next_agent_payload": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\nOutput: ",
    "review": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
    "iteration_count": 9,
    "max_iteration": 60,
    "history_of_steps": [
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\nOutput: \n\nASSIGNMENT: \n",
            "agent_output": "content ordering(input='- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the data into a logical order for narrative text generation, ensuring all information is included and no extra information is added.', instruction='- Review the provided data triples.\n- Arrange the content in a logical order that would make sense in a natural language description (e.g., introduce the subject, then list its properties such as starring actors and language).\n- Ensure that all data points are included and none are omitted or altered.\n- Output the ordered content as a list or sequence, ready for the next stage (Text Structuring).')",
            "rationale": "The user has provided a set of RDF triples from the WebNLG dataset, indicating that \"Super Capers\" stars Michael Rooker and Tom Sizemore, and that its language is English. According to the workflow policy, the first step is Content Ordering. I need to organize the data into a logical sequence that will facilitate a coherent narrative. No previous pipeline results or guardrail feedback exist yet, so I will proceed to assign the 'content ordering' worker. The worker should ensure all data fields are included and no information is omitted or invented. \nInstruction:\n- Review the provided data triples.\n- Arrange the content in a logical order that would make sense in a natural language description (e.g., introduce the subject, then list its properties such as starring actors and language).\n- Ensure that all data points are included and none are omitted or altered.\n- Output the ordered content as a list or sequence, ready for the next stage (Text Structuring)."
        },
        {
            "agent_name": "content ordering",
            "agent_input": "- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the data into a logical order for narrative text generation, ensuring all information is included and no extra information is added. \nAdditional Instruction: - Review the provided data triples.\n- Arrange the content in a logical order that would make sense in a natural language description (e.g., introduce the subject, then list its properties such as starring actors and language).\n- Ensure that all data points are included and none are omitted or altered.\n- Output the ordered content as a list or sequence, ready for the next stage (Text Structuring).",
            "agent_output": [
                "Super_Capers | language | English_language",
                "Super_Capers | starring | Michael_Rooker",
                "Super_Capers | starring | Tom_Sizemore"
            ],
            "rationale": [
                "Super_Capers | language | English_language",
                "Super_Capers | starring | Michael_Rooker",
                "Super_Capers | starring | Tom_Sizemore"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The user has provided a set of RDF triples from the WebNLG dataset, indicating that \"Super Capers\" stars Michael Rooker and Tom Sizemore, and that its language is English. According to the workflow policy, the first step is Content Ordering. I need to organize the data into a logical sequence that will facilitate a coherent narrative. No previous pipeline results or guardrail feedback exist yet, so I will proceed to assign the 'content ordering' worker. The worker should ensure all data fields are included and no information is omitted or invented. \nInstruction:\n- Review the provided data triples.\n- Arrange the content in a logical order that would make sense in a natural language description (e.g., introduce the subject, then list its properties such as starring actors and language).\n- Ensure that all data points are included and none are omitted or altered.\n- Output the ordered content as a list or sequence, ready for the next stage (Text Structuring). \n\nWorker Input: - Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the data into a logical order for narrative text generation, ensuring all information is included and no extra information is added.', instruction='- Review the provided data triples.\n- Arrange the content in a logical order that would make sense in a natural language description (e.g., introduce the subject, then list its properties such as starring actors and language).\n- Ensure that all data points are included and none are omitted or altered.\n- Output the ordered content as a list or sequence, ready for the next stage (Text Structuring). \n\nWorker Output: ['Super_Capers | language | English_language', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the data into a logical order for narrative text generation, ensuring all information is included and no extra information is added.', instruction='- Review the provided data triples.\n- Arrange the content in a logical order that would make sense in a natural language description (e.g., introduce the subject, then list its properties such as starring actors and language).\n- Ensure that all data points are included and none are omitted or altered.\n- Output the ordered content as a list or sequence, ready for the next stage (Text Structuring).')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:CONTENT ORDERING_2 ===##\n-- AGENT TYPE: content ordering\n-- AGENT NAME: content ordering\n-- INPUT START --\n- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the data into a logical order for narrative text generation, ensuring all information is included and no extra information is added. \nAdditional Instruction: - Review the provided data triples.\n- Arrange the content in a logical order that would make sense in a natural language description (e.g., introduce the subject, then list its properties such as starring actors and language).\n- Ensure that all data points are included and none are omitted or altered.\n- Output the ordered content as a list or sequence, ready for the next stage (Text Structuring).\n-- INPUT END --\n-- OUTPUT START --\n['Super_Capers | language | English_language', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n-- OUTPUT END --\n##=== END:CONTENT ORDERING_2 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "text structuring(input='- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Ordered Content: ['Super_Capers | language | English_language', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear, organized textual format (e.g., a paragraph or a list), ensuring all information is included and no extra information is added.', instruction='- Use the ordered content to create a well-structured text (preferably a single coherent paragraph).\n- Ensure that all data points (language and both starring actors) are included.\n- Do not add any information not present in the data.\n- Prepare the structured text so it is ready for the surface realization stage, focusing on clarity and logical flow.')",
            "rationale": "The content ordering stage has been completed and validated as correct by the guardrail feedback. The data is now logically ordered, starting with the language and followed by the starring actors. The next step in the pipeline is Text Structuring. I will assign the 'text structuring' worker to organize the ordered content into a coherent textual structure, such as a paragraph or list, ensuring all information is included and no extra information is added. \nInstruction:\n- Use the ordered content to create a well-structured text (preferably a single coherent paragraph).\n- Ensure that all data points (language and both starring actors) are included.\n- Do not add any information not present in the data.\n- Prepare the structured text so it is ready for the surface realization stage, focusing on clarity and logical flow."
        },
        {
            "agent_name": "text structuring",
            "agent_input": "- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Ordered Content: ['Super_Capers | language | English_language', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear, organized textual format (e.g., a paragraph or a list), ensuring all information is included and no extra information is added. \nAdditional Instruction: - Use the ordered content to create a well-structured text (preferably a single coherent paragraph).\n- Ensure that all data points (language and both starring actors) are included.\n- Do not add any information not present in the data.\n- Prepare the structured text so it is ready for the surface realization stage, focusing on clarity and logical flow.",
            "agent_output": "<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>",
            "rationale": "<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>"
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The content ordering stage has been completed and validated as correct by the guardrail feedback. The data is now logically ordered, starting with the language and followed by the starring actors. The next step in the pipeline is Text Structuring. I will assign the 'text structuring' worker to organize the ordered content into a coherent textual structure, such as a paragraph or list, ensuring all information is included and no extra information is added. \nInstruction:\n- Use the ordered content to create a well-structured text (preferably a single coherent paragraph).\n- Ensure that all data points (language and both starring actors) are included.\n- Do not add any information not present in the data.\n- Prepare the structured text so it is ready for the surface realization stage, focusing on clarity and logical flow. \n\nWorker Input: - Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Ordered Content: ['Super_Capers | language | English_language', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear, organized textual format (e.g., a paragraph or a list), ensuring all information is included and no extra information is added.', instruction='- Use the ordered content to create a well-structured text (preferably a single coherent paragraph).\n- Ensure that all data points (language and both starring actors) are included.\n- Do not add any information not present in the data.\n- Prepare the structured text so it is ready for the surface realization stage, focusing on clarity and logical flow. \n\nWorker Output: <paragraph>\n  <snt>\n    Super_Capers | language | English_language\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ntext structuring(input='- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Ordered Content: ['Super_Capers | language | English_language', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear, organized textual format (e.g., a paragraph or a list), ensuring all information is included and no extra information is added.', instruction='- Use the ordered content to create a well-structured text (preferably a single coherent paragraph).\n- Ensure that all data points (language and both starring actors) are included.\n- Do not add any information not present in the data.\n- Prepare the structured text so it is ready for the surface realization stage, focusing on clarity and logical flow.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:TEXT STRUCTURING_4 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Ordered Content: ['Super_Capers | language | English_language', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear, organized textual format (e.g., a paragraph or a list), ensuring all information is included and no extra information is added. \nAdditional Instruction: - Use the ordered content to create a well-structured text (preferably a single coherent paragraph).\n- Ensure that all data points (language and both starring actors) are included.\n- Do not add any information not present in the data.\n- Prepare the structured text so it is ready for the surface realization stage, focusing on clarity and logical flow.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_4 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "surface realization(input='- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Structured Content: \n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n- Guardrail Feedback: Previous stage output is CORRECT.\n- Task: Convert the structured content into a fluent, natural-sounding paragraph in English, ensuring all information is included and no extra information is added.', instruction='- Write a single, coherent paragraph that clearly states the language of \"Super Capers\" and lists both Michael Rooker and Tom Sizemore as starring actors.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is grammatically correct, clear, and easy to read.\n- The final output should be ready for user delivery.')",
            "rationale": "The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all information is included, the structure is clear, and no extra information has been added. The next step in the pipeline is surface realization, where the structured content will be transformed into fluent, natural language text. I will provide the original data, the structured content, and clear instructions to ensure the final output is grammatically correct, readable, and faithful to the data. \nInstruction:\n- Write a single, coherent paragraph that clearly states the language of \"Super Capers\" and lists both Michael Rooker and Tom Sizemore as starring actors.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is grammatically correct, clear, and easy to read.\n- The final output should be ready for user delivery."
        },
        {
            "agent_name": "surface realization",
            "agent_input": "- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Structured Content: \n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n- Guardrail Feedback: Previous stage output is CORRECT.\n- Task: Convert the structured content into a fluent, natural-sounding paragraph in English, ensuring all information is included and no extra information is added. \nAdditional Instruction: - Write a single, coherent paragraph that clearly states the language of \"Super Capers\" and lists both Michael Rooker and Tom Sizemore as starring actors.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is grammatically correct, clear, and easy to read.\n- The final output should be ready for user delivery.",
            "agent_output": "Super Capers is an English-language film starring Michael Rooker and Tom Sizemore.",
            "rationale": "Super Capers is an English-language film starring Michael Rooker and Tom Sizemore."
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all information is included, the structure is clear, and no extra information has been added. The next step in the pipeline is surface realization, where the structured content will be transformed into fluent, natural language text. I will provide the original data, the structured content, and clear instructions to ensure the final output is grammatically correct, readable, and faithful to the data. \nInstruction:\n- Write a single, coherent paragraph that clearly states the language of \"Super Capers\" and lists both Michael Rooker and Tom Sizemore as starring actors.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is grammatically correct, clear, and easy to read.\n- The final output should be ready for user delivery. \n\nWorker Input: - Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Structured Content: \n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n- Guardrail Feedback: Previous stage output is CORRECT.\n- Task: Convert the structured content into a fluent, natural-sounding paragraph in English, ensuring all information is included and no extra information is added.', instruction='- Write a single, coherent paragraph that clearly states the language of \"Super Capers\" and lists both Michael Rooker and Tom Sizemore as starring actors.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is grammatically correct, clear, and easy to read.\n- The final output should be ready for user delivery. \n\nWorker Output: Super Capers is an English-language film starring Michael Rooker and Tom Sizemore.\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "finalizer",
            "agent_input": "Generate a response to the provided objective as if you are responding to the original user.\n\n*** Input Context ***\n\nCOMPLETED STEPS: ##=== BEGIN:TEXT STRUCTURING_1 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Ordered Content: ['Super_Capers | language | English_language', 'Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered content into a clear, organized textual format (e.g., a paragraph or a list), ensuring all information is included and no extra information is added. \nAdditional Instruction: - Use the ordered content to create a well-structured text (preferably a single coherent paragraph).\n- Ensure that all data points (language and both starring actors) are included.\n- Do not add any information not present in the data.\n- Prepare the structured text so it is ready for the surface realization stage, focusing on clarity and logical flow.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_1 ===##\n\n##=== BEGIN:SURFACE REALIZATION_2 ===##\n-- AGENT TYPE: surface realization\n-- AGENT NAME: surface realization\n-- INPUT START --\n- Original Data: ['Super_Capers | starring | Michael_Rooker', 'Super_Capers | starring | Tom_Sizemore', 'Super_Capers | language | English_language']\n- Structured Content: \n<paragraph>\n  <snt>\n    Super_Capers | language | English_language\n  </snt>\n  <snt>\n    Super_Capers | starring | Michael_Rooker\n    Super_Capers | starring | Tom_Sizemore\n  </snt>\n</paragraph>\n- Guardrail Feedback: Previous stage output is CORRECT.\n- Task: Convert the structured content into a fluent, natural-sounding paragraph in English, ensuring all information is included and no extra information is added. \nAdditional Instruction: - Write a single, coherent paragraph that clearly states the language of \"Super Capers\" and lists both Michael Rooker and Tom Sizemore as starring actors.\n- Do not omit any information or add any details not present in the data.\n- Ensure the text is grammatically correct, clear, and easy to read.\n- The final output should be ready for user delivery.\n-- INPUT END --\n-- OUTPUT START --\nSuper Capers is an English-language film starring Michael Rooker and Tom Sizemore.\n-- OUTPUT END --\nFinalizer Agent: Carefully review the output provided above by the surface realization agent. Edit and refine the text as a human would, ensuring maximum fluency, semantic adequacy, coherence, and naturalness. Your task is to produce the best possible final text, correcting any errors or awkwardness if present.\n##=== END:SURFACE REALIZATION_2 ===##\n\n*** Output Format ***\nFinal Answer: \n",
            "agent_output": "Super Capers is an English-language film starring Michael Rooker and Tom Sizemore.",
            "rationale": null
        }
    ]
}