{
    "user_prompt": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\nOutput: ",
    "final_response": "Death on a Factory Farm was directed by Tom Simon and was broadcast by HBO.",
    "next_agent": "orchestrator",
    "next_agent_payload": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\nOutput: ",
    "review": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
    "iteration_count": 9,
    "max_iteration": 60,
    "history_of_steps": [
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\nOutput: \n\nASSIGNMENT: \n",
            "agent_output": "content ordering(input='- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative about \"Death on a Factory Farm.\" Do not omit any information or add any new facts.', instruction='- Review the two facts about \"Death on a Factory Farm.\"\n- Arrange them in an order that would make sense for a short, informative text (e.g., typically, the subject and its creator/director are introduced before mentioning the broadcaster).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Do not add, omit, or alter any information.')",
            "rationale": "The user has provided two RDF triples from the WebNLG dataset, indicating that \"Death on a Factory Farm\" is directed by Tom Simon and was broadcasted by HBO. According to the workflow policy, the first step is Content Ordering. I need to assign the 'content ordering' worker to organize these facts into a logical sequence for a coherent narrative. No prior pipeline results or guardrail feedback exist yet, so I will proceed with the initial assignment. \nInstruction:\n- Review the two facts about \"Death on a Factory Farm.\"\n- Arrange them in an order that would make sense for a short, informative text (e.g., typically, the subject and its creator/director are introduced before mentioning the broadcaster).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Do not add, omit, or alter any information."
        },
        {
            "agent_name": "content ordering",
            "agent_input": "- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative about \"Death on a Factory Farm.\" Do not omit any information or add any new facts. \nAdditional Instruction: - Review the two facts about \"Death on a Factory Farm.\"\n- Arrange them in an order that would make sense for a short, informative text (e.g., typically, the subject and its creator/director are introduced before mentioning the broadcaster).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Do not add, omit, or alter any information.",
            "agent_output": [
                "Death_on_a_Factory_Farm | director | Tom_Simon",
                "Death_on_a_Factory_Farm | broadcastedBy | HBO"
            ],
            "rationale": [
                "Death_on_a_Factory_Farm | director | Tom_Simon",
                "Death_on_a_Factory_Farm | broadcastedBy | HBO"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The user has provided two RDF triples from the WebNLG dataset, indicating that \"Death on a Factory Farm\" is directed by Tom Simon and was broadcasted by HBO. According to the workflow policy, the first step is Content Ordering. I need to assign the 'content ordering' worker to organize these facts into a logical sequence for a coherent narrative. No prior pipeline results or guardrail feedback exist yet, so I will proceed with the initial assignment. \nInstruction:\n- Review the two facts about \"Death on a Factory Farm.\"\n- Arrange them in an order that would make sense for a short, informative text (e.g., typically, the subject and its creator/director are introduced before mentioning the broadcaster).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Do not add, omit, or alter any information. \n\nWorker Input: - Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative about \"Death on a Factory Farm.\" Do not omit any information or add any new facts.', instruction='- Review the two facts about \"Death on a Factory Farm.\"\n- Arrange them in an order that would make sense for a short, informative text (e.g., typically, the subject and its creator/director are introduced before mentioning the broadcaster).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Do not add, omit, or alter any information. \n\nWorker Output: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative about \"Death on a Factory Farm.\" Do not omit any information or add any new facts.', instruction='- Review the two facts about \"Death on a Factory Farm.\"\n- Arrange them in an order that would make sense for a short, informative text (e.g., typically, the subject and its creator/director are introduced before mentioning the broadcaster).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Do not add, omit, or alter any information.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:CONTENT ORDERING_2 ===##\n-- AGENT TYPE: content ordering\n-- AGENT NAME: content ordering\n-- INPUT START --\n- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided facts into a logical order that will support a coherent and natural narrative about \"Death on a Factory Farm.\" Do not omit any information or add any new facts. \nAdditional Instruction: - Review the two facts about \"Death on a Factory Farm.\"\n- Arrange them in an order that would make sense for a short, informative text (e.g., typically, the subject and its creator/director are introduced before mentioning the broadcaster).\n- Output the ordered list of facts, ready for the next stage (Text Structuring).\n- Do not add, omit, or alter any information.\n-- INPUT END --\n-- OUTPUT START --\n['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n-- OUTPUT END --\n##=== END:CONTENT ORDERING_2 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "text structuring(input='- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Ordered Facts: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered facts into a clear, organized textual format (e.g., a paragraph or a list) that presents all the information about \"Death on a Factory Farm\" without omitting any details or introducing new information.', instruction='- Use the ordered facts to create a well-structured text (preferably a concise paragraph) that includes both the director and the broadcaster of \"Death on a Factory Farm.\"\n- Ensure that all information from the ordered facts is present and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be ready for the surface realization stage, where it will be converted into fluent, natural language.')",
            "rationale": "The content ordering stage has been completed correctly, as confirmed by the guardrail feedback (\"CORRECT\"). The facts are logically ordered, with the director introduced before the broadcaster, which is a natural narrative flow. The next step is to structure these ordered facts into an organized textual format, such as a paragraph or list, without omitting or adding any information. I will now assign the task to the 'text structuring' worker, providing the ordered facts, the original data, and clear instructions to ensure all information is included and no hallucination occurs. \nInstruction:\n- Use the ordered facts to create a well-structured text (preferably a concise paragraph) that includes both the director and the broadcaster of \"Death on a Factory Farm.\"\n- Ensure that all information from the ordered facts is present and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be ready for the surface realization stage, where it will be converted into fluent, natural language."
        },
        {
            "agent_name": "text structuring",
            "agent_input": "- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Ordered Facts: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered facts into a clear, organized textual format (e.g., a paragraph or a list) that presents all the information about \"Death on a Factory Farm\" without omitting any details or introducing new information. \nAdditional Instruction: - Use the ordered facts to create a well-structured text (preferably a concise paragraph) that includes both the director and the broadcaster of \"Death on a Factory Farm.\"\n- Ensure that all information from the ordered facts is present and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be ready for the surface realization stage, where it will be converted into fluent, natural language.",
            "agent_output": "<paragraph>\n  <snt>\n    Death_on_a_Factory_Farm | director | Tom_Simon\n    Death_on_a_Factory_Farm | broadcastedBy | HBO\n  </snt>\n</paragraph>",
            "rationale": "<paragraph>\n  <snt>\n    Death_on_a_Factory_Farm | director | Tom_Simon\n    Death_on_a_Factory_Farm | broadcastedBy | HBO\n  </snt>\n</paragraph>"
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The content ordering stage has been completed correctly, as confirmed by the guardrail feedback (\"CORRECT\"). The facts are logically ordered, with the director introduced before the broadcaster, which is a natural narrative flow. The next step is to structure these ordered facts into an organized textual format, such as a paragraph or list, without omitting or adding any information. I will now assign the task to the 'text structuring' worker, providing the ordered facts, the original data, and clear instructions to ensure all information is included and no hallucination occurs. \nInstruction:\n- Use the ordered facts to create a well-structured text (preferably a concise paragraph) that includes both the director and the broadcaster of \"Death on a Factory Farm.\"\n- Ensure that all information from the ordered facts is present and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be ready for the surface realization stage, where it will be converted into fluent, natural language. \n\nWorker Input: - Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Ordered Facts: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered facts into a clear, organized textual format (e.g., a paragraph or a list) that presents all the information about \"Death on a Factory Farm\" without omitting any details or introducing new information.', instruction='- Use the ordered facts to create a well-structured text (preferably a concise paragraph) that includes both the director and the broadcaster of \"Death on a Factory Farm.\"\n- Ensure that all information from the ordered facts is present and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be ready for the surface realization stage, where it will be converted into fluent, natural language. \n\nWorker Output: <paragraph>\n  <snt>\n    Death_on_a_Factory_Farm | director | Tom_Simon\n    Death_on_a_Factory_Farm | broadcastedBy | HBO\n  </snt>\n</paragraph>\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ntext structuring(input='- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Ordered Facts: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered facts into a clear, organized textual format (e.g., a paragraph or a list) that presents all the information about \"Death on a Factory Farm\" without omitting any details or introducing new information.', instruction='- Use the ordered facts to create a well-structured text (preferably a concise paragraph) that includes both the director and the broadcaster of \"Death on a Factory Farm.\"\n- Ensure that all information from the ordered facts is present and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be ready for the surface realization stage, where it will be converted into fluent, natural language.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:TEXT STRUCTURING_4 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Ordered Facts: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered facts into a clear, organized textual format (e.g., a paragraph or a list) that presents all the information about \"Death on a Factory Farm\" without omitting any details or introducing new information. \nAdditional Instruction: - Use the ordered facts to create a well-structured text (preferably a concise paragraph) that includes both the director and the broadcaster of \"Death on a Factory Farm.\"\n- Ensure that all information from the ordered facts is present and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be ready for the surface realization stage, where it will be converted into fluent, natural language.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Death_on_a_Factory_Farm | director | Tom_Simon\n    Death_on_a_Factory_Farm | broadcastedBy | HBO\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_4 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "surface realization(input='- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Structured Content: \n<paragraph>\n  <snt>\n    Death_on_a_Factory_Farm | director | Tom_Simon\n    Death_on_a_Factory_Farm | broadcastedBy | HBO\n  </snt>\n</paragraph>\n- No prior surface realization results or guardrail feedback for this stage.\n- Task: Convert the structured content into a fluent, grammatically correct, and natural-sounding paragraph that accurately conveys all the information from the original data without adding or omitting any details.', instruction='- Transform the structured content into a clear, natural English sentence or short paragraph.\n- Ensure both facts (the director and the broadcaster of \"Death on a Factory Farm\") are included and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be fluent, coherent, and ready for final delivery.')",
            "rationale": "The text structuring stage has been completed, and the guardrail feedback is 'CORRECT', indicating that the structured content is accurate and complete. The next step in the pipeline is surface realization, where the structured content will be transformed into fluent, natural language text. I will provide the original data, the structured content, and clear instructions to ensure the output is fluent, coherent, and does not omit or hallucinate any information. \nInstruction:\n- Transform the structured content into a clear, natural English sentence or short paragraph.\n- Ensure both facts (the director and the broadcaster of \"Death on a Factory Farm\") are included and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be fluent, coherent, and ready for final delivery."
        },
        {
            "agent_name": "surface realization",
            "agent_input": "- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Structured Content: \n<paragraph>\n  <snt>\n    Death_on_a_Factory_Farm | director | Tom_Simon\n    Death_on_a_Factory_Farm | broadcastedBy | HBO\n  </snt>\n</paragraph>\n- No prior surface realization results or guardrail feedback for this stage.\n- Task: Convert the structured content into a fluent, grammatically correct, and natural-sounding paragraph that accurately conveys all the information from the original data without adding or omitting any details. \nAdditional Instruction: - Transform the structured content into a clear, natural English sentence or short paragraph.\n- Ensure both facts (the director and the broadcaster of \"Death on a Factory Farm\") are included and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be fluent, coherent, and ready for final delivery.",
            "agent_output": "Death on a Factory Farm was directed by Tom Simon and was broadcast by HBO.",
            "rationale": "Death on a Factory Farm was directed by Tom Simon and was broadcast by HBO."
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The text structuring stage has been completed, and the guardrail feedback is 'CORRECT', indicating that the structured content is accurate and complete. The next step in the pipeline is surface realization, where the structured content will be transformed into fluent, natural language text. I will provide the original data, the structured content, and clear instructions to ensure the output is fluent, coherent, and does not omit or hallucinate any information. \nInstruction:\n- Transform the structured content into a clear, natural English sentence or short paragraph.\n- Ensure both facts (the director and the broadcaster of \"Death on a Factory Farm\") are included and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be fluent, coherent, and ready for final delivery. \n\nWorker Input: - Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Structured Content: \n<paragraph>\n  <snt>\n    Death_on_a_Factory_Farm | director | Tom_Simon\n    Death_on_a_Factory_Farm | broadcastedBy | HBO\n  </snt>\n</paragraph>\n- No prior surface realization results or guardrail feedback for this stage.\n- Task: Convert the structured content into a fluent, grammatically correct, and natural-sounding paragraph that accurately conveys all the information from the original data without adding or omitting any details.', instruction='- Transform the structured content into a clear, natural English sentence or short paragraph.\n- Ensure both facts (the director and the broadcaster of \"Death on a Factory Farm\") are included and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be fluent, coherent, and ready for final delivery. \n\nWorker Output: Death on a Factory Farm was directed by Tom Simon and was broadcast by HBO.\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "finalizer",
            "agent_input": "Generate a response to the provided objective as if you are responding to the original user.\n\n*** Input Context ***\n\nCOMPLETED STEPS: ##=== BEGIN:TEXT STRUCTURING_1 ===##\n-- AGENT TYPE: text structuring\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Ordered Facts: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Structure the ordered facts into a clear, organized textual format (e.g., a paragraph or a list) that presents all the information about \"Death on a Factory Farm\" without omitting any details or introducing new information. \nAdditional Instruction: - Use the ordered facts to create a well-structured text (preferably a concise paragraph) that includes both the director and the broadcaster of \"Death on a Factory Farm.\"\n- Ensure that all information from the ordered facts is present and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be ready for the surface realization stage, where it will be converted into fluent, natural language.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Death_on_a_Factory_Farm | director | Tom_Simon\n    Death_on_a_Factory_Farm | broadcastedBy | HBO\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:TEXT STRUCTURING_1 ===##\n\n##=== BEGIN:SURFACE REALIZATION_2 ===##\n-- AGENT TYPE: surface realization\n-- AGENT NAME: surface realization\n-- INPUT START --\n- Original Data: ['Death_on_a_Factory_Farm | director | Tom_Simon', 'Death_on_a_Factory_Farm | broadcastedBy | HBO']\n- Structured Content: \n<paragraph>\n  <snt>\n    Death_on_a_Factory_Farm | director | Tom_Simon\n    Death_on_a_Factory_Farm | broadcastedBy | HBO\n  </snt>\n</paragraph>\n- No prior surface realization results or guardrail feedback for this stage.\n- Task: Convert the structured content into a fluent, grammatically correct, and natural-sounding paragraph that accurately conveys all the information from the original data without adding or omitting any details. \nAdditional Instruction: - Transform the structured content into a clear, natural English sentence or short paragraph.\n- Ensure both facts (the director and the broadcaster of \"Death on a Factory Farm\") are included and accurately represented.\n- Do not add, omit, or alter any information.\n- The output should be fluent, coherent, and ready for final delivery.\n-- INPUT END --\n-- OUTPUT START --\nDeath on a Factory Farm was directed by Tom Simon and was broadcast by HBO.\n-- OUTPUT END --\nFinalizer Agent: Carefully review the output provided above by the surface realization agent. Edit and refine the text as a human would, ensuring maximum fluency, semantic adequacy, coherence, and naturalness. Your task is to produce the best possible final text, correcting any errors or awkwardness if present.\n##=== END:SURFACE REALIZATION_2 ===##\n\n*** Output Format ***\nFinal Answer: \n",
            "agent_output": "Death on a Factory Farm was directed by Tom Simon and was broadcast by HBO.",
            "rationale": null
        }
    ]
}