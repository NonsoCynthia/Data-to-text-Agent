{
    "user_prompt": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: ",
    "final_response": "\"Mermaid\" is a song by Train that appears on the album \"California 37\" and was produced by Espionage. The song is followed by \"Imagine,\" the John Lennon song.",
    "next_agent": "orchestrator",
    "next_agent_payload": "You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: ",
    "review": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
    "iteration_count": 9,
    "max_iteration": 60,
    "history_of_steps": [
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: \n\nASSIGNMENT: \n",
            "agent_output": "content ordering(input='- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that would make sense for a coherent narrative about \"Mermaid\" by Train. Consider standard conventions for presenting song information (e.g., album and producer before sequence in discography).', instruction='1. Review the three provided RDF triples about \"Mermaid\" by Train.\n2. Arrange them in an order that would make for a natural, logical narrative about the song, suitable for generating a fluent paragraph.\n3. Do not omit any information or add any new facts.\n4. Output the ordered list of triples, ready for the next stage.')",
            "rationale": "This is the initial step in the data-to-text pipeline. The user has provided a set of RDF triples from the WebNLG dataset, each relating to the song \"Mermaid\" by Train. The first step is Content Ordering, where the goal is to arrange the information in a logical sequence that will facilitate a coherent narrative. No prior stages or guardrail feedback exist yet, so I will assign the 'content ordering' worker. The worker should consider the natural flow for presenting song information: typically, the song's album and producer are mentioned before what song follows it in sequence."
        },
        {
            "agent_name": "content ordering",
            "agent_input": "- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that would make sense for a coherent narrative about \"Mermaid\" by Train. Consider standard conventions for presenting song information (e.g., album and producer before sequence in discography). \nAdditional Instruction: 1. Review the three provided RDF triples about \"Mermaid\" by Train.\n2. Arrange them in an order that would make for a natural, logical narrative about the song, suitable for generating a fluent paragraph.\n3. Do not omit any information or add any new facts.\n4. Output the ordered list of triples, ready for the next stage.",
            "agent_output": [
                "Mermaid_(Train_song) | album | California_37_(Train_album)",
                "Mermaid_(Train_song) | producer | Espionage_(production_team)",
                "Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)"
            ],
            "rationale": [
                "Mermaid_(Train_song) | album | California_37_(Train_album)",
                "Mermaid_(Train_song) | producer | Espionage_(production_team)",
                "Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)"
            ]
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: This is the initial step in the data-to-text pipeline. The user has provided a set of RDF triples from the WebNLG dataset, each relating to the song \"Mermaid\" by Train. The first step is Content Ordering, where the goal is to arrange the information in a logical sequence that will facilitate a coherent narrative. No prior stages or guardrail feedback exist yet, so I will assign the 'content ordering' worker. The worker should consider the natural flow for presenting song information: typically, the song's album and producer are mentioned before what song follows it in sequence. \n\nWorker Input: - Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that would make sense for a coherent narrative about \"Mermaid\" by Train. Consider standard conventions for presenting song information (e.g., album and producer before sequence in discography).', instruction='1. Review the three provided RDF triples about \"Mermaid\" by Train.\n2. Arrange them in an order that would make for a natural, logical narrative about the song, suitable for generating a fluent paragraph.\n3. Do not omit any information or add any new facts.\n4. Output the ordered list of triples, ready for the next stage. \n\nWorker Output: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_1 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ncontent ordering(input='- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that would make sense for a coherent narrative about \"Mermaid\" by Train. Consider standard conventions for presenting song information (e.g., album and producer before sequence in discography).', instruction='1. Review the three provided RDF triples about \"Mermaid\" by Train.\n2. Arrange them in an order that would make for a natural, logical narrative about the song, suitable for generating a fluent paragraph.\n3. Do not omit any information or add any new facts.\n4. Output the ordered list of triples, ready for the next stage.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_1 ===##\n\n##=== BEGIN:WORKER_2 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: content ordering\n-- INPUT START --\n- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- No prior pipeline results or guardrail feedback.\n- Task: Organize the provided data into a logical order that would make sense for a coherent narrative about \"Mermaid\" by Train. Consider standard conventions for presenting song information (e.g., album and producer before sequence in discography). \nAdditional Instruction: 1. Review the three provided RDF triples about \"Mermaid\" by Train.\n2. Arrange them in an order that would make for a natural, logical narrative about the song, suitable for generating a fluent paragraph.\n3. Do not omit any information or add any new facts.\n4. Output the ordered list of triples, ready for the next stage.\n-- INPUT END --\n-- OUTPUT START --\n['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n-- OUTPUT END --\n##=== END:WORKER_2 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "text structuring(input='- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- Ordered Triples: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a structured textual format (e.g., a paragraph) that clearly presents all the information about \"Mermaid\" by Train, ensuring no data is omitted or added.', instruction='1. Use the ordered triples to create a structured text outline or paragraph plan.\n2. Ensure each fact (album, producer, followed by) is clearly represented in the structure.\n3. Do not omit any information or introduce new facts.\n4. Prepare the structure so it is ready for fluent surface realization in the next stage.')",
            "rationale": "The content ordering stage has been completed and validated as correct by the guardrail feedback. The triples are now logically ordered: first the album, then the producer, and finally the song that follows in the discography. The next step is to structure these ordered facts into a coherent textual structure, such as a paragraph, before proceeding to surface realization. I will assign the task to the 'text structuring' worker, providing the ordered triples, the original data, and clear instructions to ensure all information is included and organized for natural paragraph generation."
        },
        {
            "agent_name": "text structuring",
            "agent_input": "- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- Ordered Triples: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a structured textual format (e.g., a paragraph) that clearly presents all the information about \"Mermaid\" by Train, ensuring no data is omitted or added. \nAdditional Instruction: 1. Use the ordered triples to create a structured text outline or paragraph plan.\n2. Ensure each fact (album, producer, followed by) is clearly represented in the structure.\n3. Do not omit any information or introduce new facts.\n4. Prepare the structure so it is ready for fluent surface realization in the next stage.",
            "agent_output": "<paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>",
            "rationale": "<paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>"
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The content ordering stage has been completed and validated as correct by the guardrail feedback. The triples are now logically ordered: first the album, then the producer, and finally the song that follows in the discography. The next step is to structure these ordered facts into a coherent textual structure, such as a paragraph, before proceeding to surface realization. I will assign the task to the 'text structuring' worker, providing the ordered triples, the original data, and clear instructions to ensure all information is included and organized for natural paragraph generation. \n\nWorker Input: - Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- Ordered Triples: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a structured textual format (e.g., a paragraph) that clearly presents all the information about \"Mermaid\" by Train, ensuring no data is omitted or added.', instruction='1. Use the ordered triples to create a structured text outline or paragraph plan.\n2. Ensure each fact (album, producer, followed by) is clearly represented in the structure.\n3. Do not omit any information or introduce new facts.\n4. Prepare the structure so it is ready for fluent surface realization in the next stage. \n\nWorker Output: <paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "orchestrator",
            "agent_input": "USER REQUEST: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: \nRESULT STEPS: ##=== BEGIN:ORCHESTRATOR_3 ===##\n-- AGENT TYPE: orchestrator\n-- AGENT NAME: orchestrator\n-- SIGNAL: FINISH\n-- RESPONSE START --\ntext structuring(input='- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- Ordered Triples: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a structured textual format (e.g., a paragraph) that clearly presents all the information about \"Mermaid\" by Train, ensuring no data is omitted or added.', instruction='1. Use the ordered triples to create a structured text outline or paragraph plan.\n2. Ensure each fact (album, producer, followed by) is clearly represented in the structure.\n3. Do not omit any information or introduce new facts.\n4. Prepare the structure so it is ready for fluent surface realization in the next stage.')\n-- RESPONSE END --\n##=== END:ORCHESTRATOR_3 ===##\n\n##=== BEGIN:WORKER_4 ===##\n-- AGENT TYPE: worker\n-- AGENT NAME: text structuring\n-- INPUT START --\n- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- Ordered Triples: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n- No prior pipeline results or guardrail feedback for this stage.\n- Task: Organize the ordered content into a structured textual format (e.g., a paragraph) that clearly presents all the information about \"Mermaid\" by Train, ensuring no data is omitted or added. \nAdditional Instruction: 1. Use the ordered triples to create a structured text outline or paragraph plan.\n2. Ensure each fact (album, producer, followed by) is clearly represented in the structure.\n3. Do not omit any information or introduce new facts.\n4. Prepare the structure so it is ready for fluent surface realization in the next stage.\n-- INPUT END --\n-- OUTPUT START --\n<paragraph>\n  <snt>\n    Mermaid_(Train_song) | album | California_37_(Train_album)\n    Mermaid_(Train_song) | producer | Espionage_(production_team)\n  </snt>\n  <snt>\n    Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n  </snt>\n</paragraph>\n-- OUTPUT END --\n##=== END:WORKER_4 ===##\nFEEDBACK: CORRECT\n\nASSIGNMENT: \n",
            "agent_output": "surface realization(input='- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- Ordered Triples: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n- Structured Text: \n  <paragraph>\n    <snt>\n      Mermaid_(Train_song) | album | California_37_(Train_album)\n      Mermaid_(Train_song) | producer | Espionage_(production_team)\n    </snt>\n    <snt>\n      Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n    </snt>\n  </paragraph>\n- No prior guardrail feedback for this stage.\n- Task: Produce a fluent, grammatically correct, and readable paragraph that expresses all the information from the structured content, without omitting any facts or introducing new information.', instruction='1. Convert the structured content into a natural, fluent paragraph.\n2. Clearly state that \"Mermaid\" is a song by Train, included on the album \"California 37\", produced by Espionage, and followed by \"Imagine\" (John Lennon song).\n3. Do not omit any information or add any facts not present in the data.\n4. Ensure the text is coherent, clear, and ready for final output.')",
            "rationale": "The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all information is present, correctly structured, and ready for surface realization. The next step is to assign the 'surface realization' worker to convert the structured content into fluent, natural language text, ensuring that all facts are included and no information is omitted or hallucinated."
        },
        {
            "agent_name": "surface realization",
            "agent_input": "- Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- Ordered Triples: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n- Structured Text: \n  <paragraph>\n    <snt>\n      Mermaid_(Train_song) | album | California_37_(Train_album)\n      Mermaid_(Train_song) | producer | Espionage_(production_team)\n    </snt>\n    <snt>\n      Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n    </snt>\n  </paragraph>\n- No prior guardrail feedback for this stage.\n- Task: Produce a fluent, grammatically correct, and readable paragraph that expresses all the information from the structured content, without omitting any facts or introducing new information. \nAdditional Instruction: 1. Convert the structured content into a natural, fluent paragraph.\n2. Clearly state that \"Mermaid\" is a song by Train, included on the album \"California 37\", produced by Espionage, and followed by \"Imagine\" (John Lennon song).\n3. Do not omit any information or add any facts not present in the data.\n4. Ensure the text is coherent, clear, and ready for final output.",
            "agent_output": "\"Mermaid\" is a song by Train that appears on the album \"California 37\" and was produced by Espionage. The song is followed by \"Imagine,\" the John Lennon song.",
            "rationale": "\"Mermaid\" is a song by Train that appears on the album \"California 37\" and was produced by Espionage. The song is followed by \"Imagine,\" the John Lennon song."
        },
        {
            "agent_name": "guardrail",
            "agent_input": "\n\nWorker: Orchestrator Thought: The text structuring stage has been completed and received a 'CORRECT' evaluation from the guardrail, indicating that all information is present, correctly structured, and ready for surface realization. The next step is to assign the 'surface realization' worker to convert the structured content into fluent, natural language text, ensuring that all facts are included and no information is omitted or hallucinated. \n\nWorker Input: - Original Data: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\n- Ordered Triples: ['Mermaid_(Train_song) | album | California_37_(Train_album)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)']\n- Structured Text: \n  <paragraph>\n    <snt>\n      Mermaid_(Train_song) | album | California_37_(Train_album)\n      Mermaid_(Train_song) | producer | Espionage_(production_team)\n    </snt>\n    <snt>\n      Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)\n    </snt>\n  </paragraph>\n- No prior guardrail feedback for this stage.\n- Task: Produce a fluent, grammatically correct, and readable paragraph that expresses all the information from the structured content, without omitting any facts or introducing new information.', instruction='1. Convert the structured content into a natural, fluent paragraph.\n2. Clearly state that \"Mermaid\" is a song by Train, included on the album \"California 37\", produced by Espionage, and followed by \"Imagine\" (John Lennon song).\n3. Do not omit any information or add any facts not present in the data.\n4. Ensure the text is coherent, clear, and ready for final output. \n\nWorker Output: \"Mermaid\" is a song by Train that appears on the album \"California 37\" and was produced by Espionage. The song is followed by \"Imagine,\" the John Lennon song.\n\nKeep your reply concise, avoid repetition, and use the following format:\nFEEDBACK:\n",
            "agent_output": "=== GUARDRAIL REVIEW (surface realization) ===\n[Fluency & Grammar]: CORRECT\n[Faithfulness & Adequacy]: CORRECT\n[Coherence & Naturalness]: CORRECT\nOVERALL: CORRECT",
            "rationale": "Evaluation of worker output."
        },
        {
            "agent_name": "finalizer",
            "agent_input": "\nUSER: You are an agent designed to generate text from data for a data-to-text natural language generation. \nYou can be provided data in the form of xml, table, meaning representations, graphs etc.\nYour task is to generate the appropriate text given the data information without omitting any field or adding extra information in essence called hallucination.\n\nDataset: webnlg\n\nHere is the data, now generate text using the provided data:\n\nData: ['Mermaid_(Train_song) | followedBy | Imagine_(John_Lennon_song)', 'Mermaid_(Train_song) | producer | Espionage_(production_team)', 'Mermaid_(Train_song) | album | California_37_(Train_album)']\nOutput: ",
            "agent_output": "\"Mermaid\" is a song by Train that appears on the album \"California 37\" and was produced by Espionage. The song is followed by \"Imagine,\" the John Lennon song.",
            "rationale": null
        }
    ]
}